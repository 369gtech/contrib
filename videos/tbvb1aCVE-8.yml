# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - swift
    - cloud
    - ios
    - aws
title: 'Exporting Ceph Object Storage data to the outside world RGW Sync Modules for fun & profit!'
language: English
recordingDate: 1550000002
description: "by Abhishek Lekshmanan\n\nAt: FOSDEM 2019\nhttps://video.fosdem.org/2019/H.2214/ceph_rgw_sync_modules.webm\n\n\nRGW (Rados Gateway) is the HTTP REST frontend to Ceph, exposing a S3\nand Swift API. From the Kraken release of Ceph, RGW introduced the\nconcept of sync modules which allows for forwarding data and metadata\nto an external tier. This allows for interesting analysis of metadata\nor archival/backup solutions without the need to support these in Ceph\nitself. We'll take a brief look into the design of sync modules, peer\ninto the crystal ball for what the future holds and also cover the\ncurrently available ElasticSearch and Cloud Sync modules, which allows\ndata to be exported to external clouds supporting a S3 like API\nincluding Amazon S3. Ceph is a distributed storage platform that is a contender to become\nthe future of software defined storage, providing unified access to\nblock, object and file interfaces. Rados Gateway (abbreviated RGW from\nhere on) is the Object storage component of Ceph, exposing an all\nfamiliar S3 and Swift APIs for object storage. Since the Kraken\nrelease, RGW introduced the concept of sync modules which allows for\nforwarding data and metadata to an external tier. This allows for\ninteresting analysis of metadata or archival/backup solutions without\nthe need to support these in Ceph itself. We'll look into the basic\ndesign of sync modules, pointers to look for should you ever need to\nwrite one, cover the existing ElasticSearch &amp; Cloud sync modules, and\nsee what the future holds for RGW Sync modules. \n\nRoom: H.2214\nScheduled start: 2019-02-03 15:55:00+01"

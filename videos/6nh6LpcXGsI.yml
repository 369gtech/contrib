# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - performance
    - architecture
title: 'Lambda Jam 2014 - Edward Kmett - Fast Purely Functional Cache-Oblivious Maps'
language: English
recordingDate: 1410616359
description: "Cache-Oblivious algorithms allow us to design software that operates optimally, independent of the number of caches we shove into our hardware architecture. You can hand-optimize for 1 or 2 such caches, but we now have a bewildering array of such caches and the pipeline is getting deeper all the time.\n\nI’ll be presenting a practical way to take the simplest possible map representation that can possibly work, sorted key-value arrays, through a sequence of transformative steps to arrive at a structure with a purely functional persistent API that has optimal cache-oblivious worst case performance for common B-Tree algorithms.\n\nUsing this technique, we can derive a container that can handle inserts several times faster than the venerable Data.Map from the Haskell ecosystem, which has been being optimized and in use for over 15 years. This comes at the cost of slightly slower lookups.\n\nThis approach is readily extended to off-line storage.\n\nChris Okasaki’s book “Purely Functional Data Structures” taught us how to reason about lazy data structures in languages like Haskell, but his techniques do not extend to cover cache-oblivious algorithms. However, I’ve recently described a technique for deamortizing calculations in Haskell’s ST monad that is suitable and which permits a whole host of Okasaki-style tools to be constructed in the space of cache-oblivious algorithms.\n\nSome knowledge of Haskell will be assumed with regards to the actual implementation."

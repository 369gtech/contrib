# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - performance
    - android
    - startup
    - ruby
    - python
    - javascript
    - kotlin
    - scala
    - java
title: 'Everything you need to know about GraalVM by Oleg Šelaje  & Thomas Wuerthinger'
language: English
recordingDate: 1572935063
description: "GraalVM is a high-performance runtime for dynamic, static, and native languages. GraalVM supports Java, Scala, Kotlin, Groovy, and other JVM-based languages. At the same time, it can run the dynamic scripting languages JavaScript including node.js, Ruby, R, and Python.\n\nGraalVM answers different performance questions and offers state-of-the-art solutions for peak-performance, startup or memory usage requirements. It's a versatile and large project, which we'll try to introduce thoroughly during this session.\n\nWe'll look at running Java applications with GraalVM, creating GraalVM native images, running dynamic languages with GraalVM and how to make them work with your existing Java code base. GraalVM has an excellent JIT compiler and we'll look at several benchmarks uncovering which optimisations are the most essential and what code patterns get the largest performance boost. We'll explain the trade-offs between running GraalVM JIT vs. GraalVM AOT, and look at the examples of GraalVM native images.\n\nYou'll learn how GraalVM implements support for the languages and what are the best practices for using them together. This session gives you a deep overview of GraalVM capabilities and allows you to effectively understand when GraalVM can help you and how to start using it.\n\nOleg Šelaje:\nHello there! Oleg is a friendly neighborhood developer advocate for @GraalVM at OracleLabs, Oracle. Loves all languages. Helps @virtualJUG, @GDGTartu. In 2017 became a Java Champion. \n\nThomas Wuerthinger:\nThomas Wuerthinger is a Senior Research Director at Oracle Labs leading the GraalVM project with teams implementing programming languages including Java, JavaScript, Ruby, Python, and R. He is the architect of the GraalVM compiler and the Truffle self-optimizing runtime system. Previously, he worked on the Crankshaft optimizing compiler of V8 at Google, and the Maxine research virtual machine at Sun Microsystems. He received a PhD degree from JKU Linz for his research about dynamic code evolution."

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - performance
title: 'GopherCon 2018: Eben Freeman - Allocator Wrestling'
language: English
recordingDate: 1536679105
description: "Conventional wisdom says that dynamic memory allocation is expensive, and that writing high-performance Go requires writing memory-efficient Go, i.e., minimizing heap allocations. Why exactly is that? What's going on under the hood anyways? If we have a Go service, can we figure out how much its allocation patterns actually affect its performance? And when is improving memory efficiency a good use of our time?\n\n\nTo help answer these questions, Eben’s tutorial session will examine the Go runtime's implementation of malloc() in detail. He’ll look at some of its internal optimizations, to better understand when allocating is fast and when it's slow. Then Eben will show how to use Go's CPU profiler, heap profiler and execution tracer to help figure out when reducing allocations will actually speed up a program.\n\n\nFinally, he’ll discuss strategies for amortizing or reducing heap allocation, such as slab allocation, string interning, buffer recycling, and the Go standard library's `sync.Pool`. Eben will also review scenarios where these tricks have helped, some of the implementation challenges, as well as the numerous ways they can go wrong"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - storage
    - php
    - web
    - security
    - architecture
    - python
title: 'Python for Everybody - Full Course with Dr. Chuck'
language: English
recordingDate: 1556798754
description: "This Python 3 tutorial course aims to teach everyone the basics of programming computers using Python. The course has no pre-requisites and avoids all but the simplest mathematics. Anyone with moderate computer experience should be able to master the materials in this course.\n\nüîó Sample Code Zip: https://www.py4e.com/code3.zip\nüîó Lecture Slides and Handouts: https://www.py4e.com/lectures3/\nüîó Free Textbook: https://www.py4e.com/book.php\nüîó Course Website: https://www.py4e.com/\n\n‚≠êÔ∏è Course Contents ‚≠êÔ∏è\n‚å®Ô∏è (0:00:00) Why Program?\n‚å®Ô∏è (0:12:21) Why Program? - Hardware Architecture\n‚å®Ô∏è (0:24:24) Python 3 Windows Installation\n‚å®Ô∏è (0:32:34) Python 3 Mac Installation\n‚å®Ô∏è (0:36:41) Why Program? - Python as a Language\n‚å®Ô∏è (0:44:17) Why Program? - What do we say?\n\n‚å®Ô∏è (0:56:55) Variables, Expressions, and Statements\n‚å®Ô∏è (1:06:20) Variables, Expressions, and Statements - Expressions\n\n‚å®Ô∏è (1:26:00) Conditional Execution\n‚å®Ô∏è (1:39:13) Conditional Execution - More Conditional Structures\n\n‚å®Ô∏è (1:52:48) Functions\n‚å®Ô∏è (2:03:02) Functions - Functions of our own\n\n‚å®Ô∏è (2:15:21) Loops and Iteration\n‚å®Ô∏è (2:25:04) Loops and Iteration - Definite Loops\n‚å®Ô∏è (2:31:40) Loops and Iteration - Loop Idioms\n‚å®Ô∏è (2:40:07) Loops and Iteration - More Loop Patterns\n\n‚å®Ô∏è (2:58:39) Strings\n‚å®Ô∏è (3:09:06) Strings - More String Operations\n\n‚å®Ô∏è (3:27:33) Reading Files\n‚å®Ô∏è (3:35:12) Reading Files - Reading Files in Python\n\n‚å®Ô∏è (3:48:42) Python Lists\n‚å®Ô∏è (3:59:27) Python Lists - Loop Operations\n‚å®Ô∏è (4:08:52) Python Lists - Strings vs. Lists\n‚å®Ô∏è (4:16:42) Python Lists - Strings, Files, Lists & the Guardian Pattern\n\n‚å®Ô∏è (4:28:44) Dictionaries\n‚å®Ô∏è (4:36:32) Dictionaries - Counting\n‚å®Ô∏è (4:45:43) Dictionaries - Counting Words in Text\n‚å®Ô∏è (4:58:21) Dictionaries - Counting Word Frequency Using a Dictionary\n\n‚å®Ô∏è (5:22:46) Tuples\n‚å®Ô∏è (5:32:18) Tuples - Sorting\n‚å®Ô∏è (5:44:26) Tuples - Sorting a Dictionary Using Tuples\n\n‚å®Ô∏è (5:54:56) Regular Expressions\n‚å®Ô∏è (6:05:21) Regular Expressions - From Matching to Extracting\n‚å®Ô∏è (6:13:47) Regular Expressions - String Parsing\n\n‚å®Ô∏è (6:22:17) Networked Programs\n‚å®Ô∏è (6:29:45) Networked Programs - Application Protocols\n‚å®Ô∏è (6:38:56) Networked Programs - Write a Web Browser\n‚å®Ô∏è (6:43:10) Networked Programs - Code Example: socket1.py\n‚å®Ô∏è (6:48:58) Networked Programs - Characters and Strings\n‚å®Ô∏è (6:59:57) Networked Programs - urllib\n‚å®Ô∏è (7:05:10) Networked Programs - Code Example: urllib1.py, urlwords.py\n‚å®Ô∏è (7:08:25) Networked Programs - Parsing HTML\n‚å®Ô∏è (7:14:48) Networked Programs - Code Example: urllinks.py\n\n‚å®Ô∏è (7:23:43) Using Web Services\n‚å®Ô∏è (7:26:35) Using Web Services - XML\n‚å®Ô∏è (7:32:02) Using Web Services - Code Example: xml1.py, xml2.py\n‚å®Ô∏è (7:37:40) Using Web Services - XML Schema\n‚å®Ô∏è (7:51:32) Using Web Services - JavaScipt Notation\n‚å®Ô∏è (7:57:45) Using Web Services - Code Example: json1.py, json2.py\n‚å®Ô∏è (8:03:08) Using Web Services - Service Oriented Approach\n‚å®Ô∏è (8:04:44) Using Web Services - Web Services\n‚å®Ô∏è (8:11:33) Using Web Services - Code Example: geojson.py\n‚å®Ô∏è (8:18:49) Using Web Services - API Security & Rate Limiting\n‚å®Ô∏è (8:28:45) Using Web Services - Code Example: twitter1.py, twitter2.py\n\n‚å®Ô∏è (8:48:01) Python Objects\n‚å®Ô∏è (8:58:28) Python Objects - Sample Code\n‚å®Ô∏è (9:06:50) Python Objects - Object Lifecycle\n‚å®Ô∏è (9:13:19) Python Objects - Inheritance\n\n‚å®Ô∏è (9:20:44) Databases\n‚å®Ô∏è (9:35:55) Databases - SQLite Browser\n‚å®Ô∏è (9:45:40) Databases - Code Sample: emaildb.py\n‚å®Ô∏è (9:58:55) Databases - Code Sample: twspider.py\n‚å®Ô∏è (10:08:06) Databases - Database Design\n‚å®Ô∏è (10:16:29) Databases - Representing Relationships\n‚å®Ô∏è (10:20:37) Databases - Relationship Building\n‚å®Ô∏è (10:33:05) Databases - Join Operation\n‚å®Ô∏è (10:43:13) Databases - Code Sample: tracks.py\n‚å®Ô∏è (10:57:45) Databases - Many-to-Many Relationships\n‚å®Ô∏è (11:09:37) Databases - Code Sample: roster.py\n‚å®Ô∏è (11:20:40) Databases - Code Sample: twspider.py\n\n‚å®Ô∏è (11:20:40) Data Visualization\n‚å®Ô∏è (11:48:18) Data Visualization - Code Sample: Geodata\n‚å®Ô∏è (12:01:05) Data Visualization - Page Rank\n‚å®Ô∏è (12:12:14) Data Visualization - Code Sample: Pagerank Spidering\n‚å®Ô∏è (12:29:12) Data Visualization - Code Sample: Pagerank Computation\n‚å®Ô∏è (12:44:17) Data Visualization - Code Sample: Pagerank Visualization\n‚å®Ô∏è (12:44:17) Data Visualization - Mailing List Crawl\n‚å®Ô∏è (12:57:08) Data Visualization - Code Sample: Gmane Data Retrieval\n‚å®Ô∏è (13:13:42) Data Visualization - Code Sample: Gmane Data Modeling\n‚å®Ô∏è (13:26:04) Data Visualization - Code Sample: Gmane Data Visualization\n\nThis course was created by Dr. Charles Severance (a.k.a. Dr. Chuck). He is a Clinical Professor at the University of Michigan School of Information, where he teaches various technology-oriented courses including programming, database design, and Web development.\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org\n\nAnd subscribe for new videos on technology every day: https://youtube.com/subscription_center?add_user=freecodecamp"

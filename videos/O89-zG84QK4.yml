# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - 'c#'
    - functional
speaker:
    name: 'Jon Skeet'
    twitter: jonskeet
title: 'Jon Skeet — The changing state of immutability C#'
language: Russian
recordingDate: 1504883095
description: "Ближайшая конференция — DotNext 2020 Moscow\n2-5 декабря, Online\nПодробности и билеты: https://dotnext-moscow.ru/\n\n. Ближайшая конференция — DotNext\_2020 Piter\n15-18 июня, Online\nПодробности и билеты: https://bit.ly/dotnext2020piter\n\n. Immutability rocks, right? When a type is immutable, it's usually easier to reason about your code, easier to share data safely, and easier to make money ooze from every USB port. That's the promise, at least. I heard an F# developer say it, so it must be true. Unfortunately, when a language or platform isn't designed to encourage immutability, immutability can introduce its own pain points - and sometimes they can be subtle. Come with me on a journey of exploring different options for implementing immutability in C#, see how it's become somewhat simpler over the various versions, and consider what the future might have in store."

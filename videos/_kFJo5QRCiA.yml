# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - unix
title: 'My Personal Fight Against The Modern Laptop'
language: English
recordingDate: 1520100002
description: "In this talk, I will take you through the tools and techniques\nI used to reverse engineer the keyboard controller in my Thinkpad\nlaptop and re-flash it with custom firmware. This will cover how the\nThinkpad range of laptops have tried to secure their firmware from\nunauthorised changes. Finally, I will present my ongoing work to\nreverse engineer the protocol used between the BIOS and the vendor's\nflash update tool (which included writing a custom virtual machine\nto emulate a minimal laptop).\n\nI was driven to start this project when I realised that the laptops\ncurrently on sale just did not meet my requirements. Even the durable\nThinkpad laptops I have preferred in the past are being dumbed down.\nEventually, I will need a new laptop - and with the current offerings,\nI just do not want anything I can purchase off the shelf. I knew\nI was not going to be able to build my own laptop from scratch\n(and having discounted all the current free/open laptop offerings)\nso I started looking at what I could hack together.\n\nTo keep the project achievable, I reduced my laptop gripes as far\nas I could and focused on just the keyboard - asking the question:\n\"Can I shoehorn an older keyboard in a modern laptop?\" Eventually\nanswering it with \"yes, sometimes.\"\n\nIt turned out to be easily possible to physically replace the\nkeyboard on any of the Thinkpads in the xx30 series with one from the\nxx20 series. I was stalled with a half-working keyboard until early\n2016 when Zmatt published how he unlocked his laptop. The firmware\nchanges needed were bundled up into a complete build system which\nothers have used to replicate the keyboard replacement. However,\nwith both these laptop series' being several years old now, I am\nstill looking at forward porting this to a newer laptop - which has\nled me to research the hardware and firmware design there.\n\nI will also take the audience through my current knowledge of how\nthe vendor's protocol to tell the BIOS to write a new image to\nflash works. Now that it is possible to write new code for the\nembedded controller and to install it and run it - I wanted to\nknow how secure this was (or wasn't) separate to simply \"fixing\"\nthe keyboard. I have written a custom virtualisation tool to host\nthe vendors \"dosflash\" program and capture the protocol it uses to\nrequest that the BIOS write a new image to flash.\n\nIt is my hope that others will be inspired to look closer at their\nhardware and to give them both some tools and the confidence that\nit is possible to \"fix\" the way that consumer hardware works.\n\nEVENT:\n\nlinux conf au 2017 - Hobart, Australia\n\nSPEAKER:\n\nHamish Coleman\n\nPERMISSIONS:\n\nThe original video was published with the Creative Commons Attribution license (reuse allowed).\n\nCREDITS:\n\nOriginal video source: https://www.youtube.com/watch?v=Fzmm87oVQ6c"

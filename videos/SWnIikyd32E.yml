# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

title: 'PREMATURE abstraction is NOT premature | Code Walks 010'
language: English
recordingDate: 1468661177
description: "There are two kinds of abstraction. One is to solve the general case. The other is to extract all hard-coded values and procedures into variables and classes and then, e.g. dependency inject them. The former is probably premature, that latter probably not. Why? Because the latter lets you keep implementing the specific case (which means you don't have to figure out the general case) but gives you seams that you can use to swap your specific solution for other specific solutions if it would prove that your understanding of the requirements were incorrect.\n\n\nIn this video I argue you should think twice before calling someone out for prematurely abstracting. Increas\n\nWhen facing a problem with a number of moving parts (think: variables in a mathematical function) you can either create a solution that allows all of the variables to vary at the same time and then try to solve the problem with all parts moving at the same time, or...\n\nOriginal upload date:\nJun 12, 2016"

# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

title: 'Michał Bartyzel -- Jak zniszczyć swój kod -- podstawy lingwistyki dla programistów'
recordingDate: 1394181027
description: "Bio:\n\nKtoś mi kiedyś powiedział, że nasze słabości są najwartościowszą rzeczą, ponieważ przepracowane mogą stanowić źródło, z którego można czerpać to, co chcemy dać innym. Uwierzyłem w to i zająłem się moimi dwoma największymi: współpracą z biznesem oraz zarządzaniem czasem. Od 2004 roku, w którym rozpocząłem tę przygodę, poznałem wiele metod służących do analizy i ilościowego wyrażania tych aspektów efektywności programisty. Pozwoliło mi to najpierw na zreorganizowanie swojego sposobu pracy, a następnie doradzanie i uczenie innych programistów jak zrobić to samo. Część swojej pracy ująłem w książce „Oprogramowanie szyte na miarę. Jak rozmawiać z klientem, który nie wie, czego chce?\".\n\nPonadto pracując z zespołami programistycznymi jako konsultant i coach wiele uwagi poświęcam procesom takim jak rozwój architektury, strategiczna refaktoryzacja, użyteczne dokumentowanie architektury. Największym moim odkryciem ostatniego czasu jest, że „gadżety\" o chwytliwych nazwach „*Patterns*\" oraz „*-Driven* niczego w naszej pracy nie zmienią, jeśli brakuje kilku absolutnie podstawowych umiejętności. Z tego względu te bazowe umiejętności są „napędem\" stale pojawiającym się w prowadzonych przeze mnie szkoleniach takich jak Techniki pracy z kodem czy Wzorce projektowe i refaktoryzacja do wzorców.\n\nCzasem tłituję: @MichalBartyzel lub bloguję: http://mbartyzel.blogspot.com.\n\n\nPresentation:\nJak zniszczyć swój kod -- podstawy lingwistyki dla programistów\nLanguage: PL\n\nNa złożone problemy nie ma prostych odpowiedzi. Gdyby były, to z pewnością ktoś by już ich udzielił. Takim właśnie złożonym problemem jest utrzymanie jakości kodu. Techniki czystego kodu, wzorce projektowe, czy architektoniczne zakładają u programisty jedną kluczową umiejętność -- potrafi on rozdzielić swoje zrozumienie i przemyślenia na temat danego problemu pomiędzy poszczególne elementy składowe danego wzorca, czy techniki. Tak więc kluczem do efektywnego zastosowania technik inżynierii oprogramowania jest umiejętność porządkowania pojęć i struktur myślowych. Jakby tego było mało wspomniane pojęcia i struktury wędrują pomiędzy biznesem a IT, przechodzą przez różnego rodzaju transformacje i wpływają na siebie nawzajem.\n\nW trakcie prelekcji przedstawię, w jaki sposób, stosując bardzo podstawowe elementy lingwistyki i świadomości języka, porządkować własne zrozumienie zagadnień biznesowych tak, aby świadomie stosować do nich narzędzia opracowane przez inżynierię oprogramowania."

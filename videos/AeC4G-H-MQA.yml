# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - android
    - testing
    - 'code design'
    - architecture
    - kotlin
    - functional
title: 'Kotlin Programming Fundamentals Tutorial - Full Course'
recordingDate: 1565010004
description: "Learn programming fundamentals using the Kotlin programming language. Kotlin is an excellent language for GUI Architectures, Libraries, and Server Side Applications. This course will start you off the right way, no matter which path you take with the language. The course features hands-on coding exercises to teach you both Functional, Event Driven, and Object Oriented design patterns.\n\nüíª Code: https://github.com/BracketCove/KotlinCourseSamples\n\nüé• Tutorial from Ryan Kay. Check out his wiseAss YouTube channel: https://www.youtube.com/user/gosuddr93\n\nüîóKotlin course on Udemy: https://www.udemy.com/application-programming-fundamentals-with-kotlin/\n\n‚≠êÔ∏è Course Contents ‚≠êÔ∏è\nSection 1\n‚å®Ô∏è (0:00:00) Course Overview: About Me, You, and this Course\n‚å®Ô∏è (0:09:23) How to Run the Examples\n‚å®Ô∏è (0:10:59) Kotlin Syntax Practice for Beginners\n\nSection 2\n‚å®Ô∏è (0:39:26) Data Landscape: Memory Spaces and Named Addresses (References)\n‚å®Ô∏è (0:44:21) How to use \"val\" and \"const val\" References to promote Immutability/Efficiency:\n‚å®Ô∏è (0:51:55) Using \"var\" Reference Types, and the problems with Shared Mutable State!\n‚å®Ô∏è (0:58:58) Giving Structure to Data with Classes\n\nSection 3 \n‚å®Ô∏è (1:19:45) A Fundamental Divide: Computation and Control Logic\n‚å®Ô∏è (1:22:52) Computing Data means Solving Problems\n‚å®Ô∏è (1:32:11) Controlling the Flow of Data\n‚å®Ô∏è (1:37:24) Event Driven Programs\n‚å®Ô∏è (1:57:33) Functional versus Imperative Program Style (mild introduction)\n\nSection 4\n‚å®Ô∏è (2:18:38) What is Software Architecture?\n‚å®Ô∏è (2:21:14) Separation of Concerns\n‚å®Ô∏è (2:34:13) Dependency Inversion: Using Interfaces Effectively for Front End and Back End\n‚å®Ô∏è (3:06:22) Extension versus Abstraction: Open/Closed Principle\n‚å®Ô∏è (3:17:00) Dependency Injection: How, What, and Why?\n‚å®Ô∏è (3:30:23) Inversion of Control via the Service Locator Pattern\n\nSection 5\n‚å®Ô∏è (3:44:25) Proving Programs with Tests (a light introduction to Testing)\n‚å®Ô∏è (4:01:42) Solving Problem (Domains) by Analysis\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://www.freecodecamp.org/news\n\nAnd subscribe for new videos on technology every day: https://youtube.com/subscription_center?add_user=freecodecamp"

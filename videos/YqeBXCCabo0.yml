# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - unix
    - testing
title: 'Using Open Hardware from my shirt to OS testing for Google''s Fuchsia'
recordingDate: 1548368604
description: "Marc MERLIN\n\nhttps://2019.linux.conf.au/schedule/presentation/251/\n\nTL;DR: come learn how going back to the days of smaller CPUs is interesting, fun, and can be useful for many applications. \r\nWhat you can expect to learn outside of the fun factor and the rewarding learning experiences:\r\n- get an overview of what you can learn and do beyond what's mentioned in your basic arduino book\r\n- some of the joys of reliving what the pioneers who built computers and drivers in the Steve Wozniak days, went through, despite how much easier it is today\r\n- how that new knowledge can be applied to various real projects like a fancy lit shirt, not losing a multi thousand dollar RC plane, or helping test new hardware at work\r\n- how despite how shiny your hammer is, not everything is a nail: where I haven't used microcontrollers, and why.\r\n\r\nDetails:\r\nLet's face it, computers have become entirely too boring. You use high level languages, some even keep track of your memory and try to stop you from writing bugs. You have more cores, more Mhz, and more memory than you know what to do with.\r\n- Has your life has started losing meaning as a result?\r\n- Are you not sure how many bits are in a byte?\r\n- Are you tired that you haven't had to deal with compiler induced bugs in too long (if ever)? Or you don't ever use compilers?\r\n- Is it boring that someone has already written the drivers for the hardware in your computer?\r\n- wouldn't it be more fun to write single threaded code without an OS then a boring small application on a computer that runs hundreds more at the same time?\r\n- Do you regret never having to pull a voltmeter or logic analyser to debug your code?\r\n\r\nFear no more: Jon Oxner and his team have been offering an open hardware miniconf at LCA since 2010, which will bring you back to the days where computers were hard, and you earned it :)\r\n\r\nThanks to Jon and his team-mates, I got into arduino and other open hardware microcontrollers in 2011. This talk will give you a taste of what I was able to learn as a result, and what you can learn too:\r\n- Once past the basic I/O on arduinos, I got to write a callback based color LED changer. Learn why callback programming is harder and yet important.\r\n- To go several notches up, I wrote a interrupt driven tricolor matrix line scan driver with Adafruit::GFX support. Learn about actual interrupt programming and GCC's volatile\r\n- I had to write a LiquidCrystal Text LCD driver for OHMC's Pebble V2 project. Learn about pulling out a data sheet and comparing it with your board's wiring.\r\n- Because I didn't learn my lesson, I ended up writing 5 different drivers for the 2017 OHMC IoTuz ESP32 based board. On that one, you'll learn that you should wait for another sucker to do the work :)\r\n\r\nBut you shouldn't just learn to program open hardware on LCA Open Hardware MiniConf boards for fun, it will come in handy later:\r\n- After losing a multi thousand dollar Ardupilot based plane I built to a motor failure in flight, I was able to modify the arduino based On Screen Display board to detect future motor failures and flash them on screen\r\n- I felt shy and without friends at parties, as well as too dark at burning man, so I made nice ESP8266 controlled shirt and pants with my own patterns\r\n- then I went overboard and added 1536 LEDs in 2 panels, one front, one back on my 2nd version of the shirt\r\n- And because a 768 LED matrix wasn't big enough, I got suckered into building a 4096 LED one soon thereafter. Great for burning man, though: https://www.youtube.com/watch?v=HH1rhg3PRgk\r\n- At work, I help with testing of our new hardware with the Fuchsia operating system, which requires remotely controlling dev boards, to reboot them when they are crashed, or other simple things like hitting GPIOs if needed, or potentially emulating a keyboard, a mouse, or even a USB boot device with a new OS image.\r\n- As a counterpoint, I'll also go into microcontroller uses I haven't done, and why.\r\n\r\nI will go into this list of examples, how they were fun, useful, or both, and hopefully encourage you to do the same.\n\nlinux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/\n\n#linux.conf.au #linux #foss #opensource"

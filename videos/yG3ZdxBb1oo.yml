# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - testing
    - python
title: 'Radoslav Georgiev - Django structure for scale and longevity'
language: English
recordingDate: 1535664155
description: "Django structure for scale and longevity\n[EuroPython 2018 - Talk - 2018-07-26 - Moorfoot]\n[Edinburgh, UK]\n\nBy Radoslav Georgiev\n\nDjango structure for scale and longevity\n\nWhy\n\nDjango is great.\n\nBut as we add new features, as our dev team grows &amp; the software needs to be stable on production, things can get quite messy.\n\nWe are going to look at some common patterns, derived from experience, on how to structure your Django project for scale and longevity.\n\nWhat\n\nMain topics are:\n\n\nDjango service layer or where should business logic live?\nUsing Django Rest Framework in a clean &amp; repeatable way &amp; combining it with the service layer.\nTesting everything that matters, without repeating ourselves in different tests.\n\n\nWe are going to talk about when to rely on existing abstraction so it's actually helpful &amp; when to avoid existing abstraction, and code things ourselves.\n\nThe examples showed in this talk are derived from working with Django in the last 5 years on projects with:\n\n\nDaily production usage &amp; production deploys.\nDozens of apps.\nHundreds of models &amp; APIs.\nTens of integrations working simultaneously.\nTeams of 5 to 10 people.\n\n\nWho\nKey takeaways from the talk:\n\n\nIncreased productivity when developing with Django.\nDeeper understanding of the software development process with Django.\nDemo project with everything mentioned in it.\n\n\nThe talk is great for all levels of Django knowledge - from beginners to advanced users &amp; teams.\n\nHow\n\nThe main way of getting the point across is going to be by showing regular code, talking how it can get messy &amp; then following up with examples of improving that code. Hopefully this talk will start a lot of discussion afterwards.\n\nBreakdown of the talk:\n\n\nDjango service layer\n\nFat models or fat views?\nWhere do I put my business logic?\nWhat is a service &amp; what goes into a service?\nWhat is a selector &amp; what goes into a selector?\n\nGeneral Django structure\n\nHow many apps should I have?\nStructuring your code so you—Ä team can be more productive and have less conflicts.\nCommon modules &amp; utilities.\n\nDoing APIs with Django Rest Framework\n\nSplitting APIs in 2 groups - \"giving data\" and \"taking data\"\nUsing a lot of generics for \"give data\"\nWhen do to selectors?\nUsing no generics for \"take data\" (APIView + Services)\nHandling errors from services\nInlining serializers &amp; avoiding serializers reuse\nA neat inline_serializer util\nIntroducing general error formatting for your API\n\nTesting all of that - what should be &amp; not be tested?\n\n\n\n\nLicense: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/\nPlease see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/"

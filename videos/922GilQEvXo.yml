# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - testing
title: 'Lambda Days 2018 - Maximilian Algehed - QuickSpec: A Lightweight Theory Exploration Tool (...)'
language: English
recordingDate: 1521476745
description: "Register to Lambda Days newsletter to receive updates: http://www.lambdadays.org/lambdadays2018/#contact\n\n\nMaximilian Algehed\nFunctional Programming Fundamentalist at Chalmers\n\nQuickSpec: A Lightweight Theory Exploration Tool for Programmers\n\nQuickSpec is a tool that automatically finds equations for a given signature of Haskell functions. For example, when running QuickSpec on the functions reverse and, the tool automatically finds the following equations:\n\nrev (rev xs) ≡ xs\nxs + (ys + zs) ≡ (xs + ys) + zs rev (xs+ys) ≡rev ys+rev xs\n\nWhen the signature is extended to include the function zip, QuickSpec finds the additional equations:\n\nzip xs (xs + ys) ≡ zip xs xs\nzip (xs +ys) xs ≡ zip xs xs\nzip (rev xs) (rev xs) ≡ rev (zip xs xs) rev (zip xs (rev xs)) ≡ zip (rev xs) xs\n\nThese equations are found by means of random testing, not by theorem proving. QuickSpec thus conjectures equations that could later be proven correct by other means.\n\nQuickSpec’s big success so far has been its use in automated theorem proving by induction. We also believe QuickSpec to be a useful tool for Haskell programmers. Specifications generated by QuickSpec provide a good start for producing manual equational specifications of a module. The fact that QuickSpec is based on testing makes it suitable for use on large and complicated Haskell modules. Our demo will show QuickSpec in action and demonstrate some recent features. We will focus on the recent extension which lets QuickSpec handle conditional equations. We aim to make the demo interactive, for example by letting the audience suggest interesting functions for QuickSpec to explore.\n\nhttp://www.lambdadays.org/lambdadays2018/maximilian-algehed"

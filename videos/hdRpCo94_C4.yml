# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - c++
    - performance
    - testing
    - architecture
title: 'CppCon 2018: R. Leahy “The Networking TS in Practice: Testable, Composable Asynchronous I/O in C++”'
language: English
recordingDate: 1541404801
description: "http://CppCon.org\nRobert Leahy “The Networking TS in Practice: Testable, Composable Asynchronous I/O in C++”\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n—\nAs the ISO Standard C++ Networking TS nears inclusion in C++20, Boost Asio, its foundation, has been available for some time; but in-depth coverage of how to use it is sparse. Asio’s own documentation, while thorough and detailed, is far from prescriptive, and offers few footholds for the beginner seeking to use and extend Asio in components of a larger software architecture. How can a library use Asio, or the TS, adding value and simplicity for users without hiding its power or sacrificing performance? \n\nThis talk provides all the context and prescriptive guidance required to get started building software components based on Asio and the Networking TS, ripe for reuse and composition. It covers in detail the guarantees Asio offers, and the patterns Asio uses: Why they are important, how to use and extend them, and how to present them to users of your components. It further demonstrates patterns and practices for constructing testable Asio- and Networking TS-based components. \n\nThe talk also includes an overview of how the Networking TS is evolving on its way to inclusion in the Standard, becoming more general and integrating with other Standard Library features, particularly the Parallelism TS and its executors, so that come C++20 your libraries will be ready to pivot from Asio to the Standard painlessly. \n— \nRobert Leahy, Maystreet LLC\nSoftware Engineer\n\nA graduate of the University of Victoria where he specialized in graphics, gaming, and digital geometry processing he spent 4.5 years in full stack web development before switching to develop infrastructure software for high frequency trading in early 2016 where he's focused on improving code quality and developer productivity while continuing to deliver and exceed performance needs and expectations.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - react
    - testing
title: 'Tools for Continuous Integration at Google Scale'
recordingDate: 1346110910
description: "Google Tech Talk\nJune 19, 2012\nGoogle NYC\n\nPresented by John Micco\n\nABSTRACT\n\nJohn Micco, a member of the Engineering Tools group at Google, will describe the continuous integration system built to help manage testing automation at Google.\n\nContinuous integration systems play a crucial role in modern software development practices, keeping software working while it is being developed. The basic steps most continuous integration systems follow are:\n\n1. Get the latest copy of the code.\n2. Build the system\n3. Run all tests.\n4. Report results.\n5. Repeat 1-4.\n\nThis works great while the codebase is small, code flux is reasonable and tests are fast. As a codebase grows over time, the effectiveness of such a system decreases. As more code is added, each clean run takes much longer and more changes gets crammed into a single run. If something breaks, finding and backing out the bad change is a tedious and error prone task for development teams.\n\nAt Google, due to the rate of code in flux and increasing number of automated tests, this approach does not scale. Each product is developed and released from 'head' relying on automated tests verifying the product behavior. Release frequency varies from multiple times per day to once every few weeks, depending on the product team.\n\nWith such a huge, fast-moving codebase, it is possible for teams to get stuck spending a lot of time just keeping their build 'green' by analyzing hundreds if not thousands of changes that were incorporated into the latest test run to determine which one broke the build. A continuous integration system should help by providing the exact change at which a test started failing, instead of a range of suspect changes or doing a lengthy binary-search for the offending change. To find the exact change that broke a test, the system could run every test at every change, but that would be very expensive.\n\nTo solve this problem, Google built a continuous integration system that uses fine-grained dependency analysis to determine all the tests a change transitively affects and then runs only those tests for every change."

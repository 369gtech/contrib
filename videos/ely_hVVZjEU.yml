# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - c++
    - ios
    - craftsmanship
title: 'CppCon 2017: Jon Cohen “A Type, by Any Other Name”'
language: English
recordingDate: 1509211708
description: "Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017\n—\nNo offense to Shakespeare, but in C++ there is a lot in a type name. A name represents a set of data and behaviors, and changing names is an often difficult and painful process. This could be to reconcile some repeated logic into common functionality, upgrade a hand-rolled type to a standard type (or vice-versa), or just upgrade your interfaces to be easier to use. \n\nWhen these types are widely used throughout a large codebase, conventional wisdom dictates that this refactoring is difficult or impossible -- changing every instance of a widesperead type would cause widespread merge conflicts, if all instances can even be found. In C++, however, it’s possible to refactor types non-atomically, in small steps which preserve invariants, without breaking any users of your code. Library teams at Google have refactored millions of lines of code this way -- this talk will outline common strategies for non-atomic renaming and refactorings, and antipatterns such as ADL use and forward declarations which complicate the process.   That is:\n\n'Tis but thy name that’s not my namespace; \nThou art thyself, though not a standard class. \nWhat's montague::? It is not base, nor parent, \nNor member, typedef, nor any other part \nBelonging to a class. O, be some other name! \nWhat's in a name? that which we call a ::rose \nBy any other name would std::move as swift; \nstd::romeo would, were he not ADL call'd, \nRetain that dear perfection which he owes \nWithout that title. ::Romeo, doff thy name, \nAnd for that name which is no part of thee \nTake all myself. \n\n— \nJon Cohen: Google, SWE\nJon Cohen is an engineer at Google, maintaining our core common C++ libraries. He spends most of his days directing Google's robot army to rewrite its own source code to be more readable and efficient, and has so far managed to do so without accidentally creating Skynet.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

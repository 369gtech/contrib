# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - storage
    - craftsmanship
    - tdd
    - agile
    - architecture
title: 'Stages of maturity on the way to microservices by Jakub Marchwicki and Jaros?aw Pa?ka'
language: English
recordingDate: 1501676965
description: "Microservies. Everybody is talking about microservices. Everybody says they do microservces (or at least they plan to) . The definition of microservice architecture is quite broad and vague: functional decoupling into discrete services. Therefore a number of approaches, with different flavors and implementations is so great - everybody can do microservices differently.\n\nIn this talk we aim to categorize and make some things clear. Based on experience from multiple companies, projects and f*ck ups, we would like to propose certain maturity criteria which organizations must embrace to start with microservices approach. Without these, things might work but times might become even harder. We will walk through multiple practices essential for successful microservices rollout.\n\nThis won’t be a purely technical talk - no successful change in the organisation happened on purely technical bases. We will correlate the maturity criteria with some business drivers, which help team-up business and technical guys on the same side.\n\nIf your organisation considers microservices, or you - as an engineer - need some argument to better justify the technical choices, this talk might be for you.\n\nJakub Marchwicki\nJakub has been around software development for past 10 years, wearing multiple hats, getting hands dirty in multiple environments, securing both technical as well as the business side of The Thing. “An engineer with a human friendly interface?”. Some languages, some frameworks, blah blah blah. Architect, programmer, manager, technical trainer, tech lead, wannabe entrepreneur, JUG leader.\n\nJaros?aw Pa?ka \nOd ponad 15 lat w bran?y IT, jako administrator baz danych, programista, architekt, manager i „in?ynier od spraw katastrof”. Bra?em udzia? w ma?ych, ?rednich i nonsensownie du?ych projektach, prowadzonych zgodnie zasadami „waterfall”, Agile oraz przy braku jakichkolwiek metodyk, z tym samym zawsze skutkiem. Co doprowadzi?o mnie do wniosku, ?e nie wa?ne co robisz tak d?ugo, jak robisz to dobrze, w najprostszy z mo?liwych sposobów i u?ywasz w?a?ciwych narz?dzi które wykonaj? prac? za ciebie. W mi?dzyczasie da?em si? porwa? ide? TDD oraz Software Craftmanship, do granic mo?liwo?ci wyeksploatowa? tak pi?kne w swej prostocie pomys?y jak REST i NoSQL, by potem porzuci? je by zg??bi? tajniki „system thinking” i zachwyci? si? si?? jak? niesie z sob"

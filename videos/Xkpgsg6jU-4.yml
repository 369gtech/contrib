# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - perl
    - php
    - c++
    - performance
    - lisp
    - java
title: 'Geller Sermersheim “High performance graphics and text rendering on the GPU for any C++ application”'
language: English
recordingDate: 1571295604
description: "http://CppCon.org\n—\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n—\nDrawing an image or displaying text on the screen is accomplished by a process called rendering. Typically a text based application renders using the CPU while 3D games make heavy use of GPU rendering. It would be ideal if every application were able to render all their graphics and text using hardware acceleration on the GPU. Is this practical, feasible, or realistic?\n\nIn this presentation we will provide a brief introduction to graphics terminology and show some of the differences between OpenGL, Direct3D, Vulkan, and Metal, as well as the overall process to render. We will explain what obstacles a developer will encounter using a Graphics API and present useful and practical alternatives.\n\nSeveral examples will be provided to illustrate the exact steps required to configure and render using a specific Graphics API. Since this is a daunting and overwhelming task we will show strategies to streamline the entire process.\n\nAs part of this talk we will explain why rendering text is more complicated than just drawing some letters on the screen. There is a difference between text shaping and font rasterization which matters if you want your application to be readable on all platforms. As an example, we will show the pros and cons of the native text rendering on Windows.\n\nA key part of the talk will introduce the idea of reusable and composable graphics buffers which can reduce the load on the rendering hardware. This approach provides an efficient way to render graphics.\n\nA brief overview of shaders, pipelines, and textures will be shown to illustrate the power of graphics, even for a general purpose GUI application.\n\nFamiliarity with C++ is advisable, no prior knowledge of graphics is required however it may be helpful.\n— \nBarbara Geller\nCopperSpice\nCo-Founder\nSan Francisco, CA\n\nI am an independent consultant with over twenty-five years of experience as a programmer and software developer. I have worked with numerous smaller companies developing in-house applications. I have also designed and developed Windows applications for several vertical markets including medical billing, transportation, and construction.\n\nMy degree is in Electrical Engineering from Cal Poly Pomona with additional studies in Computer Science.\n\nI am a Co-founder of CopperSpice, a C++ library derived from the existing Qt framework. I designed the Diamond Editor, a cross-platform programmers editor using the CopperSpice libraries. I have programmed in C++, Qt, Visual Objects, Clipper, PHP, and Java.\n\nAnsel Sermersheim\nCopperSpice\nCofounder\nSan Francisco Bay Area\n\nI have been working as a programmer for nearly twenty years. My degree is in Computer Science from Cal Poly San Luis\_ Obispo. I have transitioned to independent consulting and I am currently working on a project for RealtyShares in San Francisco. \n\nCo-founder of CopperSpice, a C++ GUI library.\nCo-founder of DoxyPress, a C++ application for generating documentation. \nDeveloper of the open source libraries: libGuarded, CsSignal and CsString. \n\nI have programmed in C++, C, Lisp, Java, and Perl, with extensive knowledge in TCP/IP and mutilthreaded design. I am an\_ avid follower of the C++ standard. Speaker at CppCon 2015, CppNow 2016, CppNow 2017, and several ACCU Bay Area meetings.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

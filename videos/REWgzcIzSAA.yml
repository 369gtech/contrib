# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - python
title: 'David Liu - Addressing multithreading and multiprocessing in transparent and Pythonic ways'
language: English
recordingDate: 1536233664
description: "Addressing multithreading and multiprocessing in transparent and Pythonic ways\n[EuroPython 2018 - Talk - 2018-07-27 - PyCharm [PyData]]\n[Edinburgh, UK]\n\nBy David Liu\n\nWith the increase in computing power, harnessing and controlling one’s code out of the single-threaded realm becomes an ever-increasing problem, coupled with the desire to stay in the Python layer. With the recent tools and frameworks that have been published, escaping the GIL cleanly is much easier than before, allow one’s Python code to effectively utilize multi-core and many core architectures in the most Pythonic ways possible. In this talk, learn about how to utilize static multiprocessing for process pinning, and effectively balancing thread pools with a monkey-patched import of threading modules.\n\nOverview:\n\nIntroduction to multithreading and multiprocessing in Python\n\n\nHistory of multithreading+multiprocessing in Python, classic frameworks \nProblems that can occur (oversubscription, nested parallelism issues, process hopping, pool resource on shared machines) \nPython accessing bigger hardware over the last few years (28+ cores, etc) \n\n\nWhen to stay in the GIL, and when to escape it \n\n\nThe advantages and safety of the GIL\nPython-level exiting of the GIL; analysis of when to return to single-threaded, and when threading is a deceivingly bad idea\nAccountability of frameworks that natively exit the GIL\n\n\nThe new multithreading and multiprocessing libraries and techniques\n\n\nstatic multiprocessing module (smp) (and monkey patching of multiprocessing)\nthread pool control with command line calls of Python ( python -m tbb -p 8)\n\n\nPutting it all together\n\n\nExamples of using static multiprocessing on a large machine to stop oversubscription\nExample of pseudo-daemon process on 4-core machine by processor pinning\nThread pool control on a simple NumPy example\n\n\nSummary - Best practices for using above methods to control multithreading+multiprocessing\n\n\nWhat needs to be done in the space (frameworks and things that need to be exposed)\nProblems that still exist in the area\n\n\nQ&amp;A\n\n\n\nLicense: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/\nPlease see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/"

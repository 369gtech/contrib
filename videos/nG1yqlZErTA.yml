# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - unix
title: 'Getting To Blinky: Virt Edition Making device pass-through work on embedded ARM'
language: English
recordingDate: 1549912218
description: "by Geert Uytterhoeven\n\nAt: FOSDEM 2019\nhttps://video.fosdem.org/2019/H.2213/vai_getting_to_blinky.webm\n\n\nVirtualization, including safe pass-through guest access to devices, is a well-known and mature technology on servers.  With the increasing complexity and abilities of SoCs, virtualization is gaining importance on embedded systems, too.\nIn this presentation, Geert will explore virtualization and device pass-through (VFIO) using QEMU and KVM on a Device Tree-based embedded ARM system, pursuing the holy grail of embedded developers: the ability to blink a connected LED.\nWhile seemingly too trivial and inapplicable, Geert will show how relevant such a contrived example is to more complex real-world uses of device pass-through.\nHe will talk about the obstacles he encountered, and how they were overcome, enabling the use of device pass-through for real on-SoC devices using DMA.\nFinally, Geert will discuss when to use device pass-through, and when other virtualization techniques offer a better solution. In this presentation, embedded developers will get a grasp of virtualization, and can expect a hands-on report of getting device pass-through working on DT-based systems, enabling them to accelerate implementing virtualization in their own projects and products.\nUnderstanding the differences between traditional PCI-based servers, and relatively new embedded systems with DT, will help software developers improve support for device pass-through, in both Linux and virtualization environments like QEMU/KVM.\nHardware (SoC and board) designers will learn about the impact of their design decisions on virtualization, and what to take into account to allow efficient virtualization of hardware devices. \n\nRoom: H.2213\nScheduled start: 2019-02-02 11:00:00+01"

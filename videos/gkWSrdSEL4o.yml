# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - c++
    - performance
    - security
    - architecture
    - java
title: 'The Invocation Game by John Rose and Paul Sandoz'
language: English
recordingDate: 1492679016
description: "Java 9 expands where invokedynamic is output by the Java compiler, such as for string concatenation, expands the support for building method handle combinator chains, such as for constructing loops, and expands the low-level notion of method handle invocation to methods on VarHandles for enhanced atomic access.\n\nThese are core features of the Java platform, that are utilized by the platform and by other frameworks and Java-based languages. They are often the foundations by which future enhancements or experiments are built upon (such as the invocation of native methods as proposed in Project Panama).\n\nThis presentation will explain those features in detail, and will then go on to discuss potential future features. The developer will gain a high-level understanding of these features and why they are important for the current and future Java platforms.\n\nPaul Sandoz \nA reformed RESTerfarian who previously co-led JAX-RS and led the implementation Jersey, who moved up into the clouds with the industrious bees of CloudBees, and then boomeranged back to Oracle and deep down into the Java stack.\n\nJohn Rose\nLead or guide for Project Panama (native interconnect), the Da Vinci Machine Project (JVM futures), Project Valhalla (polymorphism and value types), Arrays 2.0, Metropolis (Java-on-Java RI), JVM security.\n\nHas worked on Java technology at Sun then Oracle since 1995, contributing widely to functionality and performance of the Sun/JDK stack, touching everything from hardware architecture to code generators to libraries to programming languages.\n\nPast projects include JVM invokedynamic, Java inner classes, Pack200 (archive format), the initial port of HotSpot (to SPARC), the Unsafe API, and various dynamic, parallel, and hybrid languages, including Common Lisp, Scheme (“esh”), dynamic bindings for C++."

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - 'distributed systems'
    - c++
    - architecture
    - javascript
title: 'CppCon 2015: Sumant Tambe “Reactive Stream Processing in Industrial IoT using DDS and Rx.cpp”'
language: English
recordingDate: 1445089254
description: "http://www.Cppcon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015\n—\n50 billion devices will be connected to the Internet by 2020. Many of them will belong to national critical infrastructure (smart power grids, smart roads, smart hospitals, smart cities) – forming the Industrial Internet of Things (IIoT). These devices will generate data streams that will need to be correlated, merged, filtered, and analyzed in real-time.  This talk will explore an elegant solution to this problem that is productive, composable, concurrency-friendly, and scales well. We utilize OMG’s Data Distribution Service for Real-Time Systems (DDS) standard for connectivity, and Reactive Extensions (Rx) for functional-style composable asynchronous data processing in modern C++.\n\nRx is a generalization of futures and can be thought of as the async equivalent of C++ ranges.  It helps create asynchronous data processing pipelines by chaining reusable higher-order functions (map, filter, flatmap, zip etc.) that rely on a common abstraction called an Observable (a continuation monad). RxCpp makes wonderful use of functional programming features in modern C++ including generic lambdas, type inference, variadic templates, and more.\n\nConceptually, Rx is a generalization of futures. It lets programmers create asynchronous data processing pipelines (dataflow) from a number of reusable higher-order functions (map, filter, flatmap etc.) that share a common abstraction called an Observable. In many ways, Rx is an “async equivalent of C++ ranges”. Rx is one of the best libraries that truly highlights the power of functional design principles applied in object-oriented programming languages. \n\nDDS and Rx work great together because they are both reactive, use the publish-subscribe paradigm, and facilitate loose coupling between components. This presentation will discuss Rx4DDS [link=http://bit.ly/cppcon-rx4dds], which is a research library that integrates Rx with RTI Connext DDS. Rx4DDS enables a clean, distributed, asynchronous dataflow architecture for stream processing and is available in C#, C++, and JavaScript.\n\n\nReferences:\n\n[1] Rx4DDS [link=http://bit.ly/cppcon-rx4dds]\n\n[2] Reactive Programming with DDS and Rx [slides: see above] [video=https://vimeo.com/125712582] \n— \nSumant Tambe is Principal Research Engineer at Real-Time Innovations (RTI)—the leading communications platform provider for the Industrial Internet of Things. At RTI, Sumant uses cutting-edge technologies to improve RTI’s software product-line through government-funded research projects. He develops and maintains a number of standards related to Data Distribution Service (DDS), which is a data-centric publish-subscribe middleware for Industrial Internet of Things. He has over 13 years of experience using C++ and has released closed- and open-source C++ software that solve complex problems ranging from distributed systems to meta-programming. He maintains the “More C++ Idioms” wikibook and the “C++ Truths” blog. He received consecutive Microsoft Most Valuable Professional (MVP) awards in Visual C++ area (2013-2015). Sumant has a Ph.D. in Computer Science from Vanderbilt University.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

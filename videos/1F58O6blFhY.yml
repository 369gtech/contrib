# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - craftsmanship
title: 'YOW! Lambda Jam 2014 - Epic failure \/ success? Refactoring to *real* FP - Eric Torreborre'
recordingDate: 1421916300
description: "specs2 has been around for 4 years now and while it tried to take the \"functional route\" (with immutability at least), it is actually largely using uncontrolled effects.\n\nThis talk will present a diagnosis of everything that is not \"functional\" in specs2, and will describe implemented or proposed solutions to remediate to this. Here's a list of some problems:\n\nsystem properties are read directly\nthe file system is accessed to get the state of previous runs and written to after execution\nsome configuration is global (execution context for threads)\ntext is freely emitted to the console via printlns\nan attempt at processing lazily the execution miserably failed (via Reducers)\nthe code base is not easily extensible to create new reporters\nThe solutions (still being implemented/experimented) include:\n\nusing a ReaderT / ErrorT / WriterT / IO stack to control effects. This actually opens very interesting possibilities in terms of flexibility for writing your specification! Question: how tedious is that to use in practice?\n\nusing scalaz-stream to process results as they happen, even when running concurrently. This should remove some poorly performing code and simplify the code base. Question: does it work with specs2 execution model where it is possible to run only some sections of the specification concurrently, where a failed execution can stop the rest of the processing,...?\n\nusing functions extensively instead of traits to compose functionality (who knew?). Traits will only be used to compose implicits for DSLs. Question: why not take the Cake Pattern route?\n\nIn conclusion we will talk about strategies for effectively migrating a non-functional code base to a functional one. What was learnt during this experiment?\n\nFor more on YOW! Lambda Jam, visit http://lambdajam.yowconference.com.au"

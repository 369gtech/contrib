# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - 'distributed systems'
    - storage
    - elixir
    - architecture
title: 'Ben Tyler - (...) Phoenix on Riak_Core (ElixirconfEU 2016)'
language: English
recordingDate: 1464181911
description: "Experimenting with Superpowered Web Services: Phoenix on Riak_Core\n\nSlides and more info:  http://www.elixirconf.eu/elixirconf2016/ben-tyler\n\nThrough Erlang, Elixir developers have access to some amazing tools for building resilient distributed systems. riak_core is one such tool: it provides the framework behind Riak’s high availability KV store. In this talk, I’d like to explore some unconventional architecture by using riak_core and Phoenix to build fault-tolerant stateful web applications. What happens when the app servers are also the database nodes? Can we avoid some of the traditional pitfalls of stateful servers? Is this a remotely good idea? Let’s take a look!\n\nTalk objectives \n\n1) Stateless/stateful setups for web applications — what do these words mean? \n\n2) CAP in brief, consistent hash rings for distributing work: what are the tradeoffs? \n\n3) riak_core - what does it do? Paraphrasing Mariano Guerra’s excellent work. \n\n4) Build a Phoenix application that cohabitates on a riak_core hash ring. What superpowers do we gain from this? What do we have to watch out for? Can we do cool tricks with load balancing or channels? In-memory databases for super-speedy responses? \n\n5) Loosely comparable systems in production/prior art - Microsoft Orleans, Facebook Scuba, others\n\nTarget audience\n\nIntermediate+ Elixir programmers, web developers, students of distributed systems.\n\n\nBen works on service discovery, maps of the infrastructure, and human-system reliability.\n\n\nGithub: kanatohodets"

# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

title: 'Accelerate Federated Learning Model Deployment with KServe (KFServing) - Fangchi Wang & Jiahao Chen'
language: English
recordingDate: 1639859203
description: "Don’t miss out! Join us at our next event: KubeCon + CloudNativeCon Europe 2022 in Valencia, Spain from May 17-20. Learn more at https://kubecon.io The conference features presentations from developers and end users of Kubernetes, Prometheus, Envoy, and all of the other CNCF-hosted projects.\n\n利用 KServe(KFServing) 加速联邦学习的模型部署 | Accelerate Federated Learning Model Deployment with KServe (KFServing) - Fangchi Wang & Jiahao Chen, VMware\n\n联邦学习 (FL) 是近年来发展最快的机器学习 (ML) 技术，它解决了数据孤岛问题，同时加强了隐私和安全性。与传统的机器学习相比，联邦学习通常部署在不同的站点/边缘，这意味着联邦学习推理服务需要一个高效且灵活的平台，以适应不同的框架和硬件。Kubeflow 的 KFServing 组件为本地推理提供了简单、高效、可插拔和全生命周期的解决方案，完全符合联邦学习的需要。KubeFATE 是 Linux 基金会的一个开源项目，在 Kubernetes 上提供 FL 的云原生管理，并与 Kubeflow 兼容。讲座介绍了使用 KFServing 为 KubeFATE 的联邦学习模型提供服务的实践，包括：1.简要介绍 Kubeflow、KFServing 和推断服务工作流程 2.联邦学习基础，不同的联邦学习算法类型和用例 3.演示如何从水平训练的联邦学习模型创建服务\n\nFederated Learning (FL) is the fastest-growing machine learning (ML) technology recently, as it solves the data silo problem while strengthening privacy and security. Comparing to traditional ML, FL is commonly deployed in diverse sites/edges, meaning FL inference services require a platform being highly-efficient and also flexible for different frameworks and hardware. The KFServing component of Kubeflow provides simple, efficient, pluggable and full lifecycle solution for local inference, perfectly fitting FL's needs. KubeFATE is an open source project of Linux Foundation, offering cloud native management of FL on Kubernetes and compatible with Kubeflow. The talk introduces the practice to use KFServing for serving FL models with KubeFATE, including: 1. Brief introduction to Kubeflow, KFServing and InferenceService workflow 2. Federated Learning basics, different FL algorithm types and use cases 3. Demonstration of creating a serving service from a horizontally-trained FL model"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - web
    - javascript
    - scala
title: 'Lambda Jam 2014 - Eric Meijer - The Lost Art of Denotational Semantics'
language: English
recordingDate: 1410613332
description: "Denotational Semantics, in this context the art of crafting interpreters for a given programming language using a purely functional meta-language http://people.cis.ksu.edu/~schmidt/text/densem.html, was one of the very first applications of functional programming, with Christopher Strachey as one of the worldâ€™s earliest FP hackers.\n\nBy studying Denotational Semantics we gain deep insights into programming languages while at the same time learning numerous cool and practical programming tricks. For example monads found their way from pure Category Theory via Denotational Semantics into contemporary programming languages. And those that are actually enjoying writing callbacks with lambda expressions in Node.js, are believe it or not, using a technique that was invented more than half a century ago by theoreticians to model GOTOs in programming languages. Algebraic datatypes and folds? Those must be recent innovations! Nope, Strachey, Scott, and Stoy were using those long before most of us were even born. In short, a thorough understanding of Denotational Semantics is a necessary condition to reach FP mastery.\n\nIn this talk we start with a StackOverflow question about the semantics of try-catch-finally in Scala, and spell out in detail how this widely used, but often poorly understood language feature works by providing a concise continuation semantics. Next we show how try-catch-finally is nothing more than a web of gotos and global variables by defunctionalizing our semantics to generate assembly code.\n\nOperational Semantics, the craft of defining abstract machines for a given programming language using a purely functional meta-language, is the dual of Denotational Semantics. Unfortunately, that is a topic we will have to leave for a future talk."

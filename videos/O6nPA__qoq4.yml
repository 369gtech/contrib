# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - java
    - .net
    - 'c#'
title: 'Объектно-ориентированное программирование (ООП) в C#. Инкапсуляция, наследование, полиморфизм #8'
language: Russian
recordingDate: 1543515923
description: "Объектно-ориентированное программирование (ООП) в языке программирования C#. Инкапсуляция, наследование, полиморфизм - Учим Шарп\n\n\nНа этом занятии мы рассмотрим основные парадигмы объектно-ориентированного программирования (инкапсуляция, наследование, полиморфизм, абстракция, посылка сообщений, повторное использование кода). Познакомимся с модификаторами доступа (private, protected, internal, public).\n\nПодписывайтесь на информационные каналы курса, чтобы ничего не пропустить и не потерять информацию:\nЗакрытый чат для участников курса: https://vk.cc/8Ev4Gv \nРассылка с оповещениями в ВК: https://vk.cc/86Y7Pa\n\nПодписывайтесь на мои социальные сети, там много всего интересного и полезного: \nhttps://vk.com/codeblog\nhttps://tele.click/codeblog\nhttps://zen.yandex.ru/codeblog\n\nПоддержать канал: https://www.donationalerts.ru/r/shwanoff\n\nКстати, меня зовут Шванов Вадим, и я программист на языке C# уже больше 8 лет, а также я являюсь автором ресурсов для разработчиков CODE BLOG. На этом канале я рассказывают про IT, технологии и веду курс C# с нуля под названием Учим Шарп. В его рамках мы рассматриваем язык программирования c# с нуля, синтаксис, структуры данных, алгоритмы, паттерны проектирования и многое другое. Эти уроки c sharp подойдут для начинающих и для тех кто хочет подробнее изучить платформу .net и среду разработки visual studio. Для меня важно не только показать практическое применение языка си шарп и платформы dotnet, но и  объяснить базовые идеи программирования. Уроки с# выходят как минимум два раза в неделю в понедельник и четверг в 20-00. C# курс рассчитан на то, чтобы изучить программирование с нуля. Все занятия веду я сам - опытный программист c#. Разработка ведется в IDE visual studio c#. Подписывайтесь, впереди еще много интересного и полезного об it, программировании как для  начинающих, так и для более опытных программистов c#.\n\nВсе основанные на объектах языки (C#, Java, С++, Smalltalk, Visual Basic и т.п.) должны отвечать трем основным принципам объектно-ориентированного программирования (ООП), которые перечислены ниже:\n\nИнкапсуляция\nКак данный язык скрывает детали внутренней реализации объектов и предохраняет целостность данных?\n\nНаследование\nКак данный язык стимулирует многократное использование кода?\n\nПолиморфизм\nКак данный язык позволяет трактовать связанные объекты сходным образом?\n\nПрежде чем погрузиться в синтаксические детали реализации каждого принципа, важно понять базовую роль каждого из них.\n\nРоль инкапсуляции\nИнкапсуляция — это механизм программирования, объединяющий вместе код и данные, которыми он манипулирует, исключая как вмешательство извне, так и неправильное использование данных. В объектно-ориентированном языке данные и код могут быть объединены в совершенно автономный черный ящик. Внутри такого ящика находятся все необходимые данные и код. Когда код и данные связываются вместе подобным образом, создается объект. Иными словами, объект — это элемент, поддерживающий инкапсуляцию.\n\nРоль наследования\nСледующий принцип ООП — наследование — касается способности языка позволять строить новые определения классов на основе определений существующих классов. По сути, наследование позволяет расширять поведение базового (или родительского) класса, наследуя основную функциональность в производном подклассе (также именуемом дочерним классом)\n\nРоль полиморфизма\nПоследний принцип ООП — полиморфизм. Он обозначает способность языка трактовать связанные объекты в сходной манере. В частности, этот принцип ООП позволяет базовому классу определять набор членов (формально называемый полиморфным интерфейсом), которые доступны всем наследникам. Полиморфный интерфейс класса конструируется с использованием любого количества виртуальных или абстрактных членов.\n\nПо сути, виртуальный член — это член базового класса, определяющий реализацию по умолчанию, которая может быть изменена (или, говоря более формально, переопределена) в производном классе. В отличие от него, абстрактный метод — это член базового класса, который не предусматривает реализации по умолчанию, а предлагает только сигнатуру. Когда класс наследуется от базового класса, определяющего абстрактный метод, этот метод обязательно должен быть переопределен в производном классе.\n\nПодробный курс по языку программирования C#:\nhttps://www.youtube.com/watch?v=p9QxqrwkPbA&list=PLIIXgDT0bKw4OmiZ9yGmShKsY0XncViZ8\n\nПодробный курс по структурам данных на языке программирования C#:\nhttps://www.youtube.com/watch?v=hZYQmNJBsKM&list=PLIIXgDT0bKw4DB9toGU73ntyYIZV7aJi5\n\nПодробный курс по алгоритмам сортировки на языке C#:\nhttps://www.youtube.com/watch?v=PD1Nn4fHcts&list=PLIIXgDT0bKw4n6pwBjymd3wCPyQ3_SLMo\n\nРазговоры о программировании, мотивации, и ответы на IT вопросы:\nhttps://www.youtube.com/watch?v=cjjA6SQ_i3Y&list=PLIIXgDT0bKw7oKRr2c1n-e_dUgR8Aqdsi\n\n#программирование #программист #csharp #ооп #инкапсуляция #наследование #полиморфизм #ityoutubersru #codeblog"

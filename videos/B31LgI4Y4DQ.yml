# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

title: 'Data Structures - Full Course Using C and C++'
language: English
recordingDate: 1611756457
description: "Learn about data structures in this comprehensive course. We will be implementing these data structures in C or C++.  \n\nYou should have a good understanding of pointers in C. If you need to learn about pointers, watch this course: https://www.youtube.com/watch?v=zuegQmMdy8M\n\n‚úèÔ∏è Course developed by Harsha and Animesh from MyCodeSchool.\nüîó Read all about their amazing story here: https://www.freecodecamp.org/news/mycodeschool-youtube-channel-history/\nüîó Check out the MyCodeSchool channel: https://www.youtube.com/user/mycodeschool\nüîó Check out the MyCodeSchool website: http://mycodeschool.com/\n\n‚≠êÔ∏è Course Contents ‚≠êÔ∏è\n‚å®Ô∏è (0:00:00) Introduction to data structures\n‚å®Ô∏è (0:06:33) Data Structures: List as abstract data type\n‚å®Ô∏è (0:19:40) Introduction to linked list\n‚å®Ô∏è (0:36:50) Arrays vs Linked Lists\n‚å®Ô∏è (0:49:05) Linked List - Implementation in C/C++\n‚å®Ô∏è (1:03:02) Linked List in C/C++ - Inserting a node at beginning\n‚å®Ô∏è (1:15:50) Linked List in C/C++ - Insert a node at nth position\n‚å®Ô∏è (1:31:04) Linked List in C/C++ - Delete a node at nth position\n‚å®Ô∏è (1:43:32) Reverse a linked list - Iterative method\n‚å®Ô∏è (1:57:21) Print elements of a linked list in forward and reverse order using recursion\n‚å®Ô∏è (2:11:43) Reverse a linked list using recursion\n‚å®Ô∏è (2:20:38) Introduction to Doubly Linked List\n‚å®Ô∏è (2:27:50) Doubly Linked List - Implementation in C/C++\n‚å®Ô∏è (2:43:09) Introduction to stack\n‚å®Ô∏è (2:51:34) Array implementation of stacks\n‚å®Ô∏è (3:04:42) Linked List implementation of stacks\n‚å®Ô∏è (3:15:39) Reverse a string or linked list using stack.\n‚å®Ô∏è (3:32:03) Check for balanced parentheses using stack\n‚å®Ô∏è (3:46:14) Infix, Prefix and Postfix\n‚å®Ô∏è (3:59:14) Evaluation of Prefix and Postfix expressions using stack\n‚å®Ô∏è (4:14:00) Infix to Postfix using stack\n‚å®Ô∏è (4:32:17) Introduction to Queues\n‚å®Ô∏è (4:41:35) Array implementation of Queue\n‚å®Ô∏è (4:56:33) Linked List implementation of Queue\n‚å®Ô∏è (5:10:48) Introduction to Trees\n‚å®Ô∏è (5:26:37) Binary Tree\n‚å®Ô∏è (5:42:51) Binary Search Tree\n‚å®Ô∏è (6:02:17) Binary search tree - Implementation in C/C++\n‚å®Ô∏è (6:20:52) BST implementation - memory allocation in stack and heap\n‚å®Ô∏è (6:33:55) Find min and max element in a binary search tree\n‚å®Ô∏è (6:39:41) Find height of a binary tree\n‚å®Ô∏è (6:46:50) Binary tree traversal - breadth-first and depth-first strategies\n‚å®Ô∏è (6:58:43) Binary tree: Level Order Traversal\n‚å®Ô∏è (7:10:05) Binary tree traversal: Preorder, Inorder, Postorder\n‚å®Ô∏è (7:24:33) Check if a binary tree is binary search tree or not\n‚å®Ô∏è (7:41:01) Delete a node from Binary Search Tree\n‚å®Ô∏è (7:59:27) Inorder Successor in a binary search tree\n‚å®Ô∏è (8:17:23) Introduction to graphs\n‚å®Ô∏è (8:34:05) Properties of Graphs\n‚å®Ô∏è (8:49:19) Graph Representation part 01 - Edge List\n‚å®Ô∏è (9:03:03) Graph Representation part 02 - Adjacency Matrix\n‚å®Ô∏è (9:17:46) Graph Representation part 03 - Adjacency List\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news\n\nAnd subscribe for new videos on technology every day: https://youtube.com/subscription_center?add_user=freecodecamp"

# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - lisp
title: 'Concept Programming, from ideas to code'
language: English
recordingDate: 1596092592
description: "by Christophe de Dinechin\n\nAt: FOSDEM 2020\nhttps://video.fosdem.org/2020/H.2215/concept_programming.webm\n\nProgramming is the art of turning ideas into code.\nIdeas and code do not live in the same space. Any translation is lossy.\nConcept programming is a cross-language approach that focuses on this translation process, and helps identify often overlooked classes of issues.\nIdeas and code do not live in the same space. Consequently, any translation is lossy. But this loss is not immediately visible. For example, how does your programming language coerce you into coding a concept as simple as \"maximum\" or list in a way that is generally full of warts?\nConcept programming is a cross-language approach that focuses on this translation process, and helps identify often overlooked classes of issues. It separates the \"concept space\" and the \"code space\", and focuses on how the mechanics in one space translate (or not) into the other.\n\n\nIt introduces a few core ideas:\n\n\n❮ul❯\n❮li❯Syntactic noise is the difference in look between code and concept. For example, in Lisp, you write (+ 1 2)\n❮/li❯\n❮li❯Semantic noise is the difference in behavior between code and concept. For example, in C, text is null-terminated.\n❮/li❯\n❮li❯Bandwidth is the amount of the concept space covered by the code. For example, the \"+\" operator has higher bandwidth in C++ than in C\n❮/li❯\n❮li❯Signal/noise ratio is the amount of code that does not carry any useful concept. For example, curly braces and semi-colons in C.\n❮/li❯\n❮/ul❯\n\n\nRoom: H.2215 (Ferrer)\nScheduled start: 2020-02-01 17:20:00"

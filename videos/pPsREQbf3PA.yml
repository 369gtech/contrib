# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - unix
    - startup
    - aws
    - containers
    - docker
    - security
    - javascript
title: 'Creating Effective Images'
language: English
recordingDate: 1493225048
description: "Abby Fuller - Software Engineer/Technical Evangelist, AWS\n\nSick of getting paged at 2am and wondering \"where did all my disk space go?\" This has actually happened to me, and you can learn from my mistakes! New Docker users often start with a stock image in order to get up and running quickly, but that isn't always the right answer. Creating efficient images is overlooked, but important. Beyond saving resources, using minimal images also delivers important security benefits: include only what you need, and not a whole runtime that might have security vulnerabilities. In this session, I'll talk about how to create effective images, and lessons I've learned from running containers in production at a number of startups. I'll also cover topics like \"how do layers work?\", and some things you should think about when creating your images, such as; choosing or creating the right base image; ordering your statements correctly for caching; using RUN statements conservatively; and cleaning up as you install dependencies. I'll also address best practices; both at a high level (like using dual container builds - one to build an artifact, and one to build from base); and some language-specific best practices, for example, tips and tricks for creating containers for Node.js vs Go To illustrate these points, we'll cover: * How layers work? * Choosing a base image vs. creating your own with scratch. * The basics for building minimal images: ordering statements correctly for caching awesomeness, using RUN conservatively, clean up as you go. * High level best practices for Linux containers (in general, and some language specific examples). * Let's talk about Windows! High level best practices for Windows container images. * Good vs. not so good Dockerfile examples * Docker Image Scanning * Looking forward to the future for even more optimization: Unikernels for Docker, Nix."

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - c++
title: 'CppCon 2019: Victor Ciura “A Short Life span＜＞ For a Regular Mess”'
language: English
recordingDate: 1570258802
description: "http://CppCon.org\n—\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n—\nBy now you probably heard about “Regular Types and Why Do I Care” :)\nThis would be Part 2 of the journey we’ll take together, where we get a chance to explore std::span＜T＞ through our Regular lens. Don’t worry if you’ve missed Part 1; we’ll have plenty of time to revisit the important bits, as we prepare to span our grasp into C++20.\n“Regular” is not exactly a new concept. If we reflect back on STL and its design principles, as best described by Alexander Stepanov in his “Fundamentals of Generic Programming” paper, we see that regular types naturally appear as necessary foundational concepts in programming. Why do we need to bother with such taxonomies ? Because STL assumes such properties about the types it deals with and imposes such conceptual requirements for its data structures and algorithms to work properly. C++20 Concepts are based on precisely defined foundational type requirements such as Semiregular, Regular, EqualityComparable, etc.\nRecent STL additions such as std::string_view, std::reference_wrapper, std::optional, as well as new incoming types for C++20 like std::span or std::function_ref raise new questions regarding values types, reference types and non-owning “borrow” types. Designing and implementing regular types is crucial in everyday programing, not just library design. Properly constraining types and function prototypes will result in intuitive usage; conversely, breaking subtle contracts for functions and algorithms will result in unexpected behavior for the caller.\nThis talk will explore the relation between Regular types (and other concepts) and new STL additions like std::span＜T＞ with examples, common pitfalls and guidance.\n— \nVictor Ciura\nCAPHYON\nPrincipal Engineer\nRomania, EU\n\nVictor Ciura is a Principal Engineer at CAPHYON, Technical Lead on the Advanced Installer team and a Microsoft MVP (Developer Technologies).\n\nHe’s a regular guest at Computer Science Department of his Alma Mater, University of Craiova, where he gives student lectures & workshops on using C++ STL Algorithms.\n\nSince 2005, he has been designing and implementing several core components and libraries of Advanced Installer. Currently, he spends most of his time working with his team on improving and extending the repackaging and virtualization technologies in Advanced Installer IDE, helping clients migrate their traditional desktop apps to the modern Windows application format: MSIX.\n\nOne of his “hobbies” is tidying-up and modernizing (C++17) the aging codebase of Advanced Installer and has been known to build tools that help this process: Clang Power Tools\n\nMore details: @ciura_victor & https://ciura.ro\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


title: 'GopherCon 2018:  Joshua Humphries - gRPC reflection and grpcurl'
language: English
recordingDate: 1536679105
description: "gRPC and Protocol Buffers are becoming industry standards for exchanging data across systems and stitching together micro-services to build scalable applications. Most devs' experience with gRPC and protobuf tooling is a program called `protoc`, which generates code to make RPC dead simple.\n\n\nBut for some classes of tools, code generation is a poor fit. One such example is a general purpose command-line client. It should not be required to generate code and recompile this client every time there is a new service with which it wants to interact.\n\n\nEnter gRPC and protocol buffer reflection. Descriptors are the unit protobuf reflection. And gRPC includes a mechanism for gRPC clients to introspect on exposed services and access their descriptors. These are the building blocks of a completely dynamic gRPC client, no code generation necessary.\n\n\n`grpcurl` is a command-line program that uses these building blocks to do just that: dynamically invoke gRPC methods, enabling one to test any gRPC endpoint via a single command-line tool. It is basically cURL for gRPC (hence its name).\n\n\nJoshuaâ€™s tutorial session will touch on the Go libraries for gRPC, protocol buffers, and protobuf reflection. And it will show how these libraries are pulled together to build `grpcurl` itself."

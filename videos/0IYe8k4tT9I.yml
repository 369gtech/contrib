# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

title: 'Владимир Панченко — Roslyn: Mастерство статического анализа'
language: Russian
recordingDate: 1583854094
description: "Ближайшая конференция — DotNext 2020 Moscow\n2-5 декабря, Online\nПодробности и билеты: https://dotnext-moscow.ru/\n\n. Используемые технологии: Roslyn, Visual Studio SDK (VSIX).\n\nЦелевая аудитория: разработчики и билд-инженеры, особенно те, кто занимаются разработкой собственных фреймворков или работают с чужими, где готовый статический анализ кода отсутствует.\n\nОсновные проблемы и их решения: улучшить качество кода, сократить время на решение типовых проблем при работе с фреймворками (особенно самописными).\n\nЧто слушатели узнают из доклада:\n\n- в каких случаях стоит писать свой собственный анализ кода, а в каких не стоит;\n- сколько это стоит в терминах трудозатрат;\n- введение в Roslyn: как создать новый анализатор, как его протестировать, как создать code fix;\n- как сделать полноценную интеграцию в процесс разработки: работа с legacy-кодом, интеграция в CI/CD, пулл-реквесты;\n- подводные камни: версионность и обратная совместимость Roslyn SDK, особенности интеграции с Visual Studio;\n- как ещё ускорить процесс разработки, используя Roslyn для рефакторинга, форматирования, улучшения читаемости кода и т.п.\nКакой опыт спикер имеет в этой области: уже полтора года команда Владимира разрабатывает средства статического анализа и extension к Visual Studio с использованием Roslyn. Данный проект родился как решение следующей проблемы: компания имеет масштабную платформу (Acumatica xRP Framework), на которой прикладные разработчики внутри самой компании и в компаниях-партнёрах пишут бизнес-логику (ERP и различные расширения к ней). Поэтому перед компанией спикера встала задача улучшения качества кода, написанного на платформе компании, проверки его на соответствие гайдлайнам компании, сертификации решений партнёров, сокращения затрачиваемого на разработку времени за счёт избегания наиболее распространённых ошибок ещё на этапе написания кода (т.к. ошибки сразу показываются во время статического анализа), и ускорения разработки за счёт дополнительного тулинга (кастомная подсветка синтаксиса, кастомная навигация по коду, форматирование, рефакторинги и т.п.)."

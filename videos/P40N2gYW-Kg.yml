# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

title: 'Gillian a Multi language Platform for Compositional (...) - Philippa Gardner | Code Mesh V 2020'
language: English
recordingDate: 1630918388
description: "This video was recorded at Code Mesh V 2020 - https://codesync.global/conferences/c...\n\nMore great virtual tech conferences - https://codesync.global \n\n---\n\nGillian: a Multi-language Platform for Compositional Symbolic Analysisby\nPhilippa Gardner \n\nABSTRACT\n\nThis talk will give a general introduction to Gillian, a multi-language platform for symbolic program analysis being developed by my team at Imperial College London. Gillian currently supports three types of analysis: whole-program symbolic testing; full verification based on separation logic; and automatic compositional testing based on a technique called bi-abduction. It uses a core symbolic execution engine with strong mathematical foundations that unifies bug catching and verification. So far, we have instantiated Gillian to JavaScript and C. These instantiations have already been successfully applied to real-world code: to find bugs in the data-structure libraries Buckets.js and Collections-C, to find bugs and prove bounded correctness results for a jQuery-like library, cash, and to verify the deserialisation function of the AWS Encryption SDK messaging system.\n\n---\n\nTHE SPEAKER - Philippa Gardner\n\nPhilippa Gardner is a professor in the Department of Computing at Imperial College London and has a UK Research and Innovation Established Fellowship from 2018â€“2023. Her research focusses on program specification and verification. In particular, her group is credited with bringing logical abstraction and logical atomicity to modern concurrent separation logics, and is currently developing the Gillian platform for building symbolic analysis tools for real-world programming languages such as C and JavaScript, which unifies classical symbolic execution, semi-automatic verification based on separation logic, and automatic compositional testing based on bi-abduction.\n\n---\n\nCode Mesh V\nWebsite: https://codesync.global/conferences/c...\nTwitter: https://twitter.com/CodeMeshio"

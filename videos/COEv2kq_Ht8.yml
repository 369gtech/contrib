# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - c++
title: 'CppCon 2018: James McNellis “Unwinding the Stack: Exploring How C++ Exceptions Work on Windows”'
language: English
recordingDate: 1540882800
description: "http://CppCon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n—\nIf you’re writing modern C++ code, then it’s likely that you are using exceptions—whether you’re throwing them yourself or just using library code that might throw (e.g., std::vector). Have you ever stopped to think about how exceptions work under the hood? What actually happens at runtime when you throw an exception? How is the right catch statement found? \n\nIn this session, we’ll explore how C++ exceptions actually work in the Visual C++ implementation on Windows. This session will discuss: \n\n* A very, very brief overview of how exceptions work in the C++ language \n* The code and data structures the Visual C++ compiler generates to facilitate proper stack unwinding \n* Exactly what happens when an exception is thrown, how the right catch statement is found, and how the stack is unwound \n* Structured Exception Handling (SEH), the Windows OS feature atop which C++ exceptions are built \n* How the Visual C++ runtime library interacts with the OS during stack unwinding \n* Interoperation with non-C++ exceptions, like hardware exceptions \n* How termination handling works when no matching catch statement is found or when a noexcept boundary is reached \n* How things differ on different architectures (x86 is very different from x64 and ARM!) \n\nThis information can be very useful when debugging tricky problems—especially during postmortem debugging when you’re trying to figure out what went wrong before a program crashed—and we’ll highlight particular pieces of information that are most useful.\n— \nJames McNellis, Microsoft Corporation\nPrincipal Software Engineer\n\nJames McNellis is a Principal Software Engineer at Microsoft where he works on the Time Travel Debugging (TTD) reverse debugging toolkit. Prior to joining the Windows Debuggers team in 2016, he worked on the Visual C++ team and was responsible for the Microsoft C Runtime (CRT) and C Standard Library implementation. Passionate about all things related to C++, he is a frequent speaker at C++ conferences around the world and is a former top contributor on StackOverflow.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

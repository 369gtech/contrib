# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - performance
    - css
    - web
    - mobile
    - security
    - testing
    - javascript
    - functional
title: 'Planning a Front-end JS Application'
language: English
recordingDate: 1418401341
description: "Is your head spinning from the firehose of front-end tools, work flows, task runners, libraries, frameworks, MV*, and opinions? Not sure where or how to start? Need a broader introduction to how a JS application is built? Let’s take a step back and examine the building blocks of a modern front-end JS application, free from dogma. In this talk I’ll be speaking abstractly about the components a front-end engineer should consider when architecting a front-end JS application.\n\nRough outline.\n\n* Select a developers project management tool for code projects\n* Select a bug tracking system\n* Select version control system and host\n* devise a branching/tagging strategy\n* Define devices, platforms, browser engines where application will run. If the app will run offline. If the application will need Internationalization/localization.\n* Verify data API, it’s documentation, how to request updates, and plan cross domain strategy if needed\n* Possibly select local server / staging server / production server stack (or very least how to run/serve your code, everywhere it will live e.g. a mobile app)\n* Select package managers\n* Dependency monitoring services\n* Determine coding style/conventions/quality rules and enforce it\n* html, css, and js linting/hinting\n* editor/IDE configurations\n* hooks\n* Select build tool / task runner\n* Define & select application structure & tools\n* Dependency Management\n* MV* (router, views, models, layout)\n* CSS, HTML, JS frameworks/libraries\n* Determine deployment strategy (e.g. CI, app stores etc..)\n* Select a testing automation service to run tests across your supported devices, platforms, and browser engines\n* Select unit testing solution(s)\n* Test Runner\n* Code Coverage\n* TDD/BDD/ or just write unit tests\n* hooks\n* Select code complexity reporting/analysis solution(s)\n* Select integration testing solution(s)\n* Select functional testing solution(s)\n* Select error monitoring solution(s)\n* Select user monitoring solution(s)\n* Select site monitoring / performance monitoring solution(s)\n* Select site analytics solution(s)\n* Determine SEO strategy\n* Determine security model (https, multifactor authentication etc…)\n* Select a CDN\n* Write documentation explaining everything you decided, why you decided it, how it functions, and how it all fits together\n\nCody Lindley\nDeveloper Advocate, Telerik\nhttps://twitter.com/codylindley\n\nCheck out all our events\nhttp://fitc.ca\nhttps://twitter.com/fitc"

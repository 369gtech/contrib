# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - mobile
    - craftsmanship
    - functional
title: 'YOW! Lambda Jam 2018 - Ryan Trinkle - Full-Stack Haskell, from Prototype to Production'
language: English
recordingDate: 1532566803
description: "Three years ago, I quit my job to bet everything on the proposition that Haskell could excel not just for specialized, high-assurance software, but for the kinds of software that millions of engineers work on every day. I had previously built backends with Haskell, with the wonderful experience of code that works reliably, a team that doesn't step on each others' toes, and an ease of refactoring that let us keep the codebase clean without risking regressions. But now, GHCJS and FRP had finally become reliable enough to trust in the real world. It was a game changer: Haskell could now build world-class graphical user interfaces, too, and deploy them as single page web apps — in theory.\n\nIn practice, there were many obstacles along the way. However, I found that even with the need to blaze new trails from time to time, our overall pace was far faster than anything I had seen in the imperative tech stacks I'd worked with before. Strong types and pure values decreased bug counts and made code much more readable. Some former backend developers who had scrupulously avoided frontend development told me that they now enjoyed working on the frontend, too.\n\nSince then, I've worked with the community to continue building infrastructure to expand the areas where we can use Haskell to get real work done. Enabling mobile development required bug fixes to GHC, a rearchitected approach to cross-compilation in Nixpkgs, and bindings to native APIs. To scale up to larger projects, we've improved existing tools and created new tools that make developer workflows simpler, faster, and more discoverable. And to make Haskell app development more accessible to beginners and professionals without Haskell experience, we've made more and more functionality available out of the box.\n\nIn this talk, I'll show you the tools that are available today and the challenges that lie ahead. I hope you'll come away with a broadened understanding of how Haskell can be applied in your own professional projects — and how the theory of functional programming can be a potent practical tool.\n\nRyan Trinkle is a founding partner of Obsidian Systems, a software engineering consultancy that uses Haskell, Nix, and other functional tools to deliver better code faster and more predictably.  In 2015, he created Reflex, a Haskell-based functional reactive programming engine that now supports building desktop, web, and native mobile applications from a single codebase.  He has been a board member of Haskell.org since 2014 and was a founding member of the New York Haskell Users Group in 2012.  He holds degrees in law (J.D., Harvard '09) and computer science and computer systems engineering (B.S., Rensselaer Polytechnic Institute '05).\n\nFor more on YOW! Conference, visit http://www.yowconference.com.au"

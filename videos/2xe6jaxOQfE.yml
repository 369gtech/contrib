# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - unix
title: 'Retro music - Open Cubic Player'
language: English
recordingDate: 1601795146
description: "by Stian Sebastian Skjelstad\n\nAt: FOSDEM 2020\nhttps://video.fosdem.org/2020/K.3.401/retro_music_open_cubic_player.webm\n\nThis presentation includes multiple topics mixed together\n*   Porting a DOS multimedia program into Linux/BSD\n*   How music was composed/stored in old type of games from the 8bit era, up into the amiga (and partly the DOS world)\n*   How does audio/music hardware work. C64 SID, ZX-Spectrum and alike, Amiga, Adlib FM-synth OPL2/3 and General Midi\nAs a child, I was exposed to Cubic Player. This program was a text-based music player. All the color full texts mesmerized me and it gave a direct visual feedback of how the music was generated.\n\n\nDuring teenage years I learned programming and got introduced to Linux. All the sourcecode for everything was available. The kernel, multimedia libraries, tools, all kind of APIs. If there are anything you wonder how works, you can inspect it. If you are unable resolve a specific detail in your own project, try to find another project that has done something similar! But for playback of these Amiga style modules, there was no programs that had the same charm as Cubic Player. Programs like mikmod, XMMS, Audacious only displayed playlist, maybe instrument-names and maybe an spectrum analyzer.\n\n\nWhen I discovered that Cubic Player had been released as Open Cubic Player. I grabbed the source code and started to study it. All of it was based on direct hardware access, as it was written for DOS. Direct access to video-memory/hardware, raw keyboard scan codes, hardware interrupts for timers allowing background rendering of audio if needed etc. A natural candidate for a novice programmer to port?\n\n\nSlowly I went through one and one single file of the original source code.\n*  Lots of logic could be kept\n*  Some could be thrown away like direct audio hardware drivers\n*  Some needed heavy rewrites like video output\n*  Assembler needed to be rewritten into C inlines\n*  The timer interrupt porting caused a zero-day kernel bug to be discovered ❮a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0554\"❯https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0554❮/a❯\n\n\nWhen text appears on the screen, and audio (highly distorted in the beginning) appeared, was a magical feeling. Progress was faster when the goal felt to be well within the reach.\n\n\nWhen you the make your code public, people start to use it... and you start to get feedback like:\n* Program is unable to compile on other platforms\n* Program crash on other platforms\n* Specific crashes that only happens for some few people - compiler bugs (these were more common back in the days)\n\n\n❮hr /❯\n\nHow did old systems playback music? Using specific hardware circuits.\nHow is music composed / stored / playback?\n\n\nWe will take a deep dive into these two questions on these platforms:\n\n\nZX-Spectrum 128 .AY files - Using code chopped out from \"aylet\"\n\n\nAtari ST .YM files - Using ST Sound Library\n\n\nC64 .SID files - libsidplay\n\n\nOPL2/OPL3 style - libadplug\n\n\nAmiga style modules\n\n\nGeneral MIDI - TiMidity++\n\n\nOpen Source makes it possible to combine the work and effort from multiple volunteers. Not everything is a always an easy walk in the park, but it sure makes it easier than writing everything from scratch when there are known working code that can be either be used as a template or wrapped around.\n\nRoom: K.3.401\nScheduled start: 2020-02-01 15:10:00"

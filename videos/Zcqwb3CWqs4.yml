# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - c++
    - embedded
title: 'CppCon 2019: Bryce Adelstein Lelbach “The C++20 Synchronization Library”'
language: English
recordingDate: 1571959489
description: "http://CppCon.org\n—\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n—\nIn the decade since C++11 shipped, the hardware landscape has changed drastically. 10 years ago, we were still in the early stages of the concurrent processing revolution; 2 to 4 hardware threads were common and more than 10 was \"many\". Our tolerance for synchronization latency was greater; we were willing to pay microseconds and milliseconds.\n\nToday, dozens and hundreds of threads are common, and \"many\" means hundreds of thousands. Concurrent applications are plagued by contention challenges that were unimaginable a decade ago. With the traditional tools we have today, programmers often have to choose between unacceptable contention and unacceptable high latency when synchronizing between threads.\n\nThe C++20 synchronization library brings solutions - new lightweight synchronization primitives that can efficiently marshall hundreds of thousands of threads:\n\n- `std::atomic::wait`/`std::atomic::notify_*`: Efficient atomic waiting.\n- `std::atomic_ref`: Atomic operations on non-`std::atomic` objects.\n- `std::counting_semaphore`: Lightweight access coordination.\n- `std::latch` and `std::barrier`: Marshalling groups of threads.\n\nIn this example-oriented talk, you'll learn how and when to use these new tools to build scalable, modern C++ applications that can run in parallel on virtually any hardware, from embedded controllers to server CPUs to modern GPUs.\n— \nBryce Adelstein Lelbach\nNVIDIA\nCUDA C++ Core Libraries Lead\nSan Francisco Bay Area\n\nBryce Adelstein Lelbach has spent nearly a decade developing libraries in C++. Bryce is passionate about C++ evolution and is one of the leaders of the C++ community. He is an officer of ISO/IEC JTC1/SC22/WG21, the C++ Standards Committee. Bryce chairs both the C++ Committee's Tooling Study Group (SG15) and Library Evolution Incubator (SG18). He is the program chair for the C++Now and CppCon conferences, and the chief organizer of the Bay Area C++ User Group. On the C++ Committee, he has personally worked on the C++17 parallel algorithms, executors, futures, senders/receivers, multidimensional arrays, and modules. Bryce works at NVIDIA, where he leads the CUDA C++ core libraries team. He is one of the initial developers of the HPX parallel runtime system. He also helped start the LLVMLinux initiative and has occasionally contributed to the Boost C++ libraries.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

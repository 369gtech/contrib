# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - unix
    - performance
    - security
    - python
title: 'Victor Stinner - Python 3: ten years later'
language: English
recordingDate: 1536233664
description: "Python 3: ten years later\n[EuroPython 2018 - Talk - 2018-07-27 - Lammermuir]\n[Edinburgh, UK]\n\nBy Victor Stinner\n\nDraft of the talk:\n\n\nGrowing populary of the Python programming language\n\n\nDefacto language in the scientific world, replacing other closed\nsource and more specialized but limited language\nFavorite programming language used as the first language to learn\nprogramming\n\nPort Python 2 code to Python 3\n\n\nPort Python 2 code to Python 3\nNo: \"Add support for Python 3\", don't loose Python 2 support\nPort Python 3 code to Python 2\nPython changes to make the transition smoother:\nPEP 414: u\"syntax\" reintroduced in Python 3.3\nPEP 461: bytes % args, Python 3.5\nMore \"Py3k\" warnings added to Python 2.7.x\nLinters like flake8 detect some issues\nsix, futures, modernize, 2to6, etc.\n\nAnalysis of the transition\n\n\nGood: At Pycon US 2014, Guido van Rossum announced that the Python\n2.7 support was extended from 2015 to 2020 to give more time to\ncompanies to port their applications to Python 3.\nBad: 2to3: \"drop Python2 support at once\", don't work when you have\ndependencies.\nIf done again, would it be different? Yes, obviously.\nPython 4 will be different than Python 3: no more \"break the world\"\nrelease, but a \"regular deprecation period\" release, as any other\nrelease. Break things, one by one :-)\n\nBugs that won't be fixed in Python 2 anymore\n\n\nSome bugs cannot be fixed without breaking the backward\ncompatibility\nUnicode Support\nPython 2 I/O stack bugs: rely on libc stdio.h\nSecurity: hash DoS, enabled by default in Python 3.3, Python 3.4 now\nuses SipHash\nsubprocess is not thread-safe in Python 2.\nPython 2 subprocess has many race conditions: fixed in Python 3\nwith a C implementation which has less or no race condition.\nHandling signals while forking in complex.\nthreading.RLock is not \"signal safe\" in Python 2\nPython 2 requires polling to wait for a lock or for I/O.\nPython 3 uses native threading API with timeout and has asyncio.\nPython 3 uses a monotonic clock to not crash on system clock update\n(ex: DST change).\nPython 3 has a better GIL.\nPython 2 inherits file descriptors on fork+exec by default.\nPython 3 don't: PEP 446.\nFunctions can fail with OSError(EINTR) when interrupted by a signal,\nneed to be very careful everywhere. SIGCHLD when a child process\ncompletes, SIGWINCH when using ncurses. Python 3.5 restarts the\ninterrupted system call for you.\n\nPerformance\n\n\nPython 3.6 is now faster than Python 2.7\nhttps://speed.python.org/\n\nEvolutions of the Python language\n\n\nPython 3.5\nPEP 492: async/await \"keywords\" for asyncio.\n(Really keywords in Python 3.7.)\nPEP 461: bytes % args and bytearray % args\nPEP 465, a new matrix multiplication operator: a @ b.\nPEP 448: Generalized unpacking:\nhead, *tail = list\nmylist = [1, 2, **other_list]\nmydict = {\"key\": \"value\", **other_dict}\nPython 3.6\nPEP 515: million = 1_000_000\nname = \"World\"; print(f\"Hello {name}!\") \n PEP 526, syntax for variable annotations.\nPEP 525, asynchronous generators.\nPEP 530: asynchronous comprehensions.\n\nBury Python 2?\n\n\n\"Python 3 only\"\nhttps://pythonclock.org/\nhttp://www.python3statement.org/\nFedora 23, Ubuntu 17.10: no python2 (/usr/bin/python) in the base\nsystem\n2017, April: IPython 6.0\n2017, December: Django 2\n\n\n\n\n\nLicense: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/\nPlease see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/"

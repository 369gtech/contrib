# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - testing
title: 'llvm.mix Multi-stage compiler-assisted specializer generator built on LLVM'
language: English
recordingDate: 1550135628
description: "by Eugene Sharygin\n\nAt: FOSDEM 2019\nhttps://video.fosdem.org/2019/K.4.201/llvm_mix.webm\n\n\nAutomatic program specialization is a well-formed area of computer-science\nresearch with many interesting practical applications, but to this day most\nexisting specializers and partial evaluators are only applicable to one of a\nfew high level programming languages. The reason is that developing a\nspecializer for a new language remains still a from-scratch endeavor, and it's\nhard. \n\nIt is the lack of general-purpose flexible program specialization tools that\noften leads projects to creating custom just-in-time compilers for their\nspecific use cases. These compilers, even if based on mature compiler\ninfrastructures such as LLVM's, immediately become way harder to develop and\nmaintain than simple interpreters they make obsolete. In many cases, however,\nprogram specialization could bring the proverbial 80% of the benefits for a\nfraction of the cost, while maintaining simplicity and testability of the\noriginal design. \n\nIt is our belief that developing a specializer for a new language should be as\neasy as adding some supporting syntactic and semantic definitions to a\nlanguage front-end and reusing an existing specializer in the middle end. \n\nSuch a language-independent specializer preferably has to: \n\n\nremove as much interpretation overhead as possible, and add no extra\ninterpretation overhead of its own;\nbe able to produce both interpreters and compilers from the same code base,\nto enable gradual transition and to preserve debugging and testing\nproperties of the original source code;\ninclude a binding-time analysis component to simplify binding-time\nimprovements of the source program;\nbe guided by annotations embedded in the source program as opposed to\nexternal annotations, to ease development and maintenance;\nsupport multiple compilation stages to take advantage of as many\nspecialization points as necessary;\nbe flexible enough with resource management to fit in both managed and\nunmanaged environments.\n\n\n\nWe will present the design and the prototype implementation of a\nmulti-stage offline specializer generator that ticks most of these boxes. The\ngenerator is based on LLVM and runs in compile time along with the compilation\nof a source program. It is controlled by intrinsics and function and parameter\nattributes in LLVM IR. Being developed in the middle-end of the LLVM\noptimizer, the specializer generator can be used with any language front-end.\nWe will talk about some elements of its design, its limitations, and ways to\nimprove. \n\nRoom: K.4.201\nScheduled start: 2019-02-03 13:30:00+01"

# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - ml
    - tensorflow
    - performance
    - testing
title: 'HPVM: Extending LLVM For Compiling to Heterogeneous Parallel Systems'
language: English
recordingDate: 1600502773
description: "by Vikram Adve\n\nAt: FOSDEM 2020\nhttps://video.fosdem.org/2020/K.4.201/llvm_hpvm.webm\n\nTITLE: HPVM: Extending LLVM For Compiling to Heterogeneous Parallel Systems\n\n\nSPEAKER: Vikram Adve, University of Illinois at Urbana-Champaign\n\n\nAbstract:\n\n\nWe will present a detailed description of HPVM, an extension to LLVM for\ncompiling to heterogeneous parallel systems.  HPVM aims to make it much\neasier to develop compilers for diverse parallel hardware, and to implement\nparallel languages (including domain-specific languages) for such hardware.\nWe will briefly describe at a high-level the key parallel abstraction of\nhierarchical dataflow graphs used in HPVM, and then focus on on how HPVM is\nintegrated on top of LLVM.  A second part of the talk will briefly describe\nhow we are extending HPVM to enable greater energy efficiency and\nperformance by taking advantage of ❮em❯approximation❮/em❯ opportunities in\napplication domains such as machine learning and image processing.  To\nconclude, I will briefly discuss how HPVM might be added as a dialect in\nMLIR so that other MLIR dialects and MLIR-based compilers can use HPVM for\ncode generation to diverse heterogeneous hardware targets, including GPUs,\nFPGAs, and custom accelerators.\nTITLE: HPVM: Extending LLVM For Compiling to Heterogeneous Parallel Systems\n\n\nSPEAKER: Vikram Adve, University of Illinois at Urbana-Champaign\n\n\nBackground\n\n\nLLVM has been extraordinarily successful as a compiler infrastructure for\nenabling a wide range of compilers and compiler-based tools for scalar and\nvector processors, and for supporting GPU compilers for OpenCL and CUDA.\nLLVM has seen only limited use, however, for other classes of target\narchitectures, such as reconfigurable hardware (FPGAs) and domain-specific\naccelerators such as for machine learning, image processing, signal\nprocessing, graph processing, and other emerging domains.  More generally,\nheterogeneous system-on-chip (SoC) architectures are becoming increasingly\nimportant, especially in \"edge computing,\" but LLVM has largely been\nlimited to the host CPU and GPU on such SoCs, even though the number of\nother programmable components on these systems has been steadily increasing.\n\n\nOverview\n\n\nIn this talk, I will describe an extension of LLVM for developing a compiler\ninfrastructure -- Heterogeneous Parallel Virtual Machine, or HPVM -- for\nheterogeneous parallel systems [1].  I will briefly describe at a high-level\nthe key parallel abstraction of hierarchical dataflow graphs used in HPVM to\ndescribe heterogeneous parallelism, where ordinary LLVM code is used to\nrepresent the computatational tasks.  The main focus of this part of the\ntalk is how HPVM is integrated on top of LLVM.  First, HPVM has been\nimplemented as a set of intrinsic functions that extend the LLVM\ninfrastructure.  Second, the HPVM code generation framework reuses existing\nLLVM (and other) back-ends, in order to leverage existing (often well-tuned)\ncode generators for individual programmable hardware elements, such as NVPTX\nfor NVIDIA GPUs, Intel's SPIR-V code generator for Intel SSE and AVX vector\nhardware, and Altera's AOCL compiler for targeting Altera's FPGAs.\n\n\nA second part of the talk will briefly describe how we are extending\nHPVM to enable greater energy efficiency and performance by taking\nadvantage of ❮em❯approximation❮/em❯ opportunities in application domains such\nas machine learning and image processing.  In particular, we are\ncurrently developing ApproxHPVM, an extension of HPVM that supports a\nrange of algorithmic and hardware-level approximation mechanisms [2].\nMoreover, ApproxHPVM only requires application programmers to specify\nhigh-level, \"end-to-end\" design goals such as the maximum allowable\naccuracy loss in a neural network or loss of image quality (e.g.,\nPSNR) and the system automatically selects, optimizes and maps\napproximation choices for individual coarse-grain tensor operations in\nthe application.  The goal is to make sophisticated and well-tested\napproximation techniques widely accessible to application developers.\n\n\nTo conclude, I will briefly discuss how HPVM and ApproxHPVM might be added\nas a dialect in MLIR so that other MLIR dialects and MLIR-based compilers\ncan use HPVM for diverse heterogeneous hardware targets, including GPUs,\nFPGAs, and custom accelerators.\n\n\nTarget Audience\n\n\nThe intended target audience for this talk falls into broadly two classes.\nThe first includes compiler practitioners and researchers interested in\ncompiling to heterogeneous systems, such as SoCs, FPGAs, and other\n\"edge-compute\" hardware.  The second includes language implementers\ninterested in implementing or porting domain-specific languages such as\nTensorFlow, Halide, SPIRAL, and others to heterogeneous parallel systems.\n\n\nTakeaways\n\n\nWe envision several takeaways for the audience: (1) Understand how to\ndevelop an extension of LLVM that makes it easier to target emerging\nhardware platforms not sufficiently well-supported by the existing LLVM IR\nand code …"

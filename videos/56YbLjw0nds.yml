# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - performance
title: 'KLEAK Practical Kernel Memory Disclosure Detection'
language: English
recordingDate: 1549648413
description: "by Thomas Barabosch\n\nAt: FOSDEM 2019\nhttps://video.fosdem.org/2019/K.3.401/kleak.webm\n\n\nKernel memory disclosures - also known as kernel information leaks - denote the inadvertent\ncopying of uninitialized bytes from kernel space to user space. Such disclosed memory may\ncontain cryptographic keys, information about the kernel memory layout, or other forms of secret\ndata. In this presentation, we introduce KLEAK, our method to dynamically detect kernel memory disclosures.\nIt utilizes a simple form of taint tracking, enhanced with compiler instrumentation as well as rotation of\nthe taint values to decrease false positives. KLEAK detected more than 20 kernel information leaks in NetBSD-current and FreeBSD 11.2. Kernel memory disclosures - also known as kernel information leaks - denote the inadvertent\ncopying of uninitialized bytes from kernel space to user space. Such disclosed memory may\ncontain cryptographic keys, information about the kernel memory layout, or other forms of secret\ndata. Even though kernel memory disclosures do not allow direct exploitation of a system, they\nlay the ground for it. \n\nWe introduce KLEAK, a simple approach to dynamically detect kernel information leaks.\nSimply said, KLEAK utilizes a rudimentary form of taint tracking: it taints kernel memory with\nmarker values, lets the data travel through the kernel and scans the buffers exchanged between the\nkernel and the user space for these marker values. By using compiler instrumentation and rotating\nthe markers at regular intervals, KLEAK significantly reduces the number of false positives, and is\nable to yield relevant results with little effort. \n\nOur approach is practically feasible as we prove with an implementation for the NetBSD\nkernel. A small performance penalty is introduced, but the system remains usable. In addition to\nimplementing KLEAK in the NetBSD kernel, we applied our approach to FreeBSD 11.2. In total,\nwe detected 21 previously unknown kernel memory disclosures in NetBSD-current and FreeBSD\n11.2, which were fixed subsequently. As a follow-up, the projects’ developers manually audited\nrelated kernel areas and identified dozens of other kernel memory disclosures. \n\nRoom: K.3.401\nScheduled start: 2019-02-02 13:25:00+01"

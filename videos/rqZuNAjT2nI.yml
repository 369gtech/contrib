# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - javascript
    - functional
title: 'Lucas da Costa — There is a bluebird in my talk that wants to get out'
recordingDate: 1553845090
description: "Ближайшая конференция:\nHolyJS 2019 Piter — 24-25 мая 2019, Санкт-Петербург\nПодробности и билеты: http://bit.ly/2P4jIYM\n\nСам Лукас говорит, что его доклад достаточно простой и ему можно поставить уровень смузи. А именно если вы понимаете, что такое функции в js, условные и арифметические операторы — то велком.\n\nНо все же мы решили поставить хардкор. Основной упор в докладе идет на концепт Y-комбинаторов и лямбда-исчислений, и если вы используете функциональный подход в промышленной разработке, некоторые концептуальные моменты функционального программирования выходят за рамки вашего кода. И то, что покажет Лукас, будет в максимальной мере полезно практикующим функциональный подход и позволит раскрыть некоторые моменты самой концепции.\n\nБудет ли показанный подход применим в продакшне? Не думаем. Но сами идеи дадут взгляд с другого ракурса и помогут составить более полную картину.\n\nThere is a bluebird in my talk that wants to get out, but state machines are too tough for him. This is not your usual functional programming talk. In it, you'll learn lambda calculus itself and see how exciting it can be to derive combinators from the most elegant ideas in computability theory.\n\nFunctional programming, JavaScript, and birds. Most people like at least two of them.\n\nIn this talk, we'll explore functional programming from a different angle. Instead of talking about functors, bifunctors, profunctors, monads, comonads and other trendy concepts we'll take a step back and learn lambda calculus itself.\n\nHow does lambda calculus express computation? How can we represent concepts such as true or false or, even better, how can we express boolean logic? How can we do arithmetic operations without using any numbers? What about loops? These are a few of the questions we're going to answer and we're gonna do that with small incremental steps.\n\nDuring all this process we'll also identify some unique and exquisite creatures: birds (or combinators, as some other people call them). These are patterns that will emerge naturally from the process of rediscovering lambda calculus and are guaranteed to blow everyone's mind by their simplicity and elegance.\n\nRediscovering lambda calculus feels like rediscovering math and finally understanding what is behind functional programming.\n\nWe'll finally let our bluebird out. We won't be too tough for him."

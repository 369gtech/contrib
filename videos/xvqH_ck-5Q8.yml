# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - startup
    - testing
    - architecture
    - python
title: 'CppCon 2016: Diego Rodriguez-Losada “Conan, a C and C++ package manager for developers"'
language: English
recordingDate: 1475686850
description: "http://CppCon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016\n—\nConan is a FOSS (MIT license) and portable C and C++ package manager for developers: \n\nDecentralized, git-like, the server is also released OSS, so it can be hosted in-house, and use conan totally behind the firewall, or just for your private packages. Using local caches, allows full offline usage, also for creating and testing packages.\n\nHandles both binary packages and building them from source. Packages defined with simple yet powerful python recipes. Build system agnostic, so any build system can be wrapped while creating packages. Generators also allow to consume packages directly from many environments: CMake, Visual Studio, XCode, etc.\n\nGrowing and Involved community, contributing in Github repositories with code and feedback, and actively using conan.\n\nThis talk will give a brief technical introduction to conan, showing first how to consume existing packages, defining dependencies, using generators for different build systems (e.g. cmake), using package options (e.g. shared/static linkage) and settings (compiler, version, architecture, libstdc++/libc++/libstdc++11, build type, etc) to install or build the right packages. Also, different handling of paths for shared libraries in different OS will be summarized, and how conan approaches them. \n\nThen, how to create packages will be introduced by example. How to retrieve source code from external sources (github, sourceforge, or any other origin), or integrating the recipe in the same source project, how to build the packages from sources, considering the different inputs (as compiler, architecture, etc. settings and options), how to package artifacts and how to define package information. A short discussion about how upstream dependencies affect your own package depending on linkage, visibility, versions, etc, will be done.\n— \nDiego Rodriguez-Losada\nSW Engineer, Freelance\nDiego's passions are robotics and SW development. He has developed many years in C and C++ in the Industrial, Robotics and AI fields. He was also a University (tenure track) professor till 2012, when he quit academia to try to build a C/C++ dependency manager, co-founded startup biicode, since then mostly developing in Python. Now he is working as freelance and having fun with conan.io.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - c++
title: 'CppCon 2019: Filipp Gelman “unique_pseudofunction: N overloads for the price of 1”'
language: English
recordingDate: 1571122802
description: "http://CppCon.org\n—\nDiscussion & Comments: https://www.reddit.com/r/cpp/\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019\n—\nThis talk will present a class template that behaves almost like `unique_function`, but lacks one of its key restrictions: having just one overload of `operator()`.\n\n`std::function` is an excellent tool for interface design. It encapsulates almost any object that is invocable the right way. `unique_function` is an even better tool. It can encapsulate some types that `std::function` can't - the ones that are move-only. Unfortunately, it is still invocable in just one way. You get one list of argument types and that's what you must pass.\n\nWhat if the object you want to pass is invocable in more than one way? What if its `operator()` is a template that you will instantiate with N different types? What if it is a variadic template to which you will pass 0-N arguments? What if you use tag dispatch to do N different things?\n\nIf you want these things, as well as the type erasure offered by `std::function` and the move-only support offered by `unique_function`, then `unique_pseudofunction` is the class for you.\n\nFollow the path I took towards realizing that `unique_pseudofunction` is the solution to most of my problems. We'll break this down into the following steps:\nBuilding a simple non-generic `unique_function`\nMaking it generic\nAdding a small buffer optimization\nExtending it to support more than one overload of `operator()`\n\nWe will also look in close detail at several problems solved along the way, and several others that are still unsolved.\n\nThis talk involves small amounts of C++17 and large amounts of template metaprogramming, function references, and type erasure.\n— \nFilipp Gelman\nSoftware Developer, Bloomberg LP\nAt Bloomberg LP since 2016, Filipp enjoys exploring the obscure, arcane, and esoteric corners of the C++ language. He is known among his coworkers for heavy use of templates, emphasis on compile time computation, and abusing language features for nefarious purposes.\n\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

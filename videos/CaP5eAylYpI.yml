# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - css
    - web
    - javascript
title: 'Денис Мишунов — Я создал Франкенштейна: 3 истории миграции'
language: Russian
recordingDate: 1567000728
description: "Ближайшая конференция — HolyJS 2020 Piter\n22-25 июня, Online\nПодробности и билеты: https://bit.ly/hollyJS2020\n\n\n\n\n. Дважды подумайте, прежде чем начинать рефакторинг. А лучше трижды. И даже не надейтесь, что все будет сделано правильно. Хотите узнать, как процесс улучшения может завести в тупик? Учиться на чужих ошибках гораздо полезнее, чем на своих.\n\nДля многих полное переписывание проекта — единственно верный способ миграции. Несмотря на то что это может дать отличный результат по сравнению с постепенной миграцией, большинство проектов не могут себе это позволить из-за нехватки ресурсов, времени, бюджета и других причин. В таком случае остается миграция «по частям», при которой, как правило, «старое» и «прошлое» сталкиваются в некое «старошлое», проект становится неповоротливым, сложным в управлении и поддержке. Что в итоге все равно рано или поздно приводит к полному переписыванию.\n\nНо что, если бы мы могли мигрировать наши фронтенд-приложения постепенно, при этом не волноваться, что наш глобальный скоуп будет бесконечно испорчен, CSS начнет выливаться и заливаться во все возможные щели, а различные JS-библиотеки и фреймворки нашего проекта начнут крыть друг друга по матушке? Что, если бы мы могли разбить наше фронтенд-приложение на микросервисы, в рамках которых могли бы делать практически все что угодно без стандартных прелестей постепенной миграции?\n\nЭтот доклад в достаточно непринужденной форме расскажет три истории миграции трех приложений с различным подходом, различными архитектурными решениями и, соответственно, различным результатом. Слушатели получат базовое понимание общих подходов к фреймворк-независимой миграции фронтенд-приложений с использованием микросервисной архитектуры, веб-компонентов и хорошего чувства юмора."

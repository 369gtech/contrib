# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - php
title: 'DrupalCon Baltimore 2017: Development Workflow Tools for Open-Source PHP Libraries'
recordingDate: 1493180886
description: "\"Hey, I just had a great idea for a new module! \_It's new and different and it's going to be GREAT! \_So, let's see here, what do I need to do? Well, I've still got some Drupal 7 sites, so I'll need two versions of the module. Maybe I should put some of the code in a library, so I don't have to put the same exact code in the Drupal 8 version of the module.\_I guess that means I'll need to register my project with Packagist. I'd better make sure that the code has some tests; it sure would be good to know how much code coverage I'm getting, and whether the library is standards-compliant, and it would be nice to get some feedback if my classes and methods start to get too complicated. Since I'm making a library, it would be really rightous to provide some good documentation. It would be handy if I could throw in a phar, so that users could fiddle with the code from the command line.\_The cool kid's GitHub projects have these neat looking badges at the top of their README files; if my project looked cool like that, maybe more people would submit pull requests. Maybe I should tell people how to contribute and report issues. I guess I'd better sit down for a few days and build a fancy website for my library that pulls all of this together. This modularity thing is starting to sound hard; maybe I should just skip it.\"\n\nHaving a fine-tuned continuous integration environment is extremely valuable, even for small projects. Today, there is a wide variety of standalone projects and online Software-As-A-Service offerings that can super-streamline your everyday development tasks that can help you get your projects up and running like a pro. In this session, we'll look at how you can get the most out of:\n\nGitHub\_source code repository\nPackagist\_package manager for Composer\nTravis CI\_continuous integration service\nCoveralls\_code coverage service\nScrutinizer\_static analysis service\nBox2\_phar builder\nSami\_api documentation generator\nReadTheDocs\_online documentation reader service\nComposer\_scripts and projects\_for running local tests and builds\nAfter mastering these tools, you will be able to quickly set up a new php library project and use it in your Drupal modules."

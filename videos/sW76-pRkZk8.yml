# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - storage
    - mongo
    - testing
    - python
title: 'Lynn Root - Advanced asyncio: Solving Real-world Production Problems'
language: English
recordingDate: 1569920505
description: "\"Advanced asyncio: Solving Real-world Production Problems\n[EuroPython 2019 - Talk - 2019-07-12 - MongoDB]\n[Basel, CH]\n\nBy Lynn Root\n\nBy building a simplified chaos monkey service, we will walk through how to create a good foundation for an asyncio-based service, including graceful shutdowns, proper exception handling, and testing asynchronous code. We’ll get into the hairier topics as well, covering topics like working with synchronous code, debugging and profiling, and working with threaded code. We’ll learn how to approach asynchronous and concurrent programming with Python’s asyncio library, take away some best practices, and learn what pitfalls to avoid.\n\nOutline:\n(40 minutes + 5 min Q&amp;A, if unable to get 45 minutes, then 30 min slot with no time for Q&amp;A)\n\n\nIntro (2m)\nSpeaker/company intro\nSetting the context/purpose of talk\nFoundations (9m - trimmed to 6m for 30 min slot)\nInitial setup of an asyncio service (2m)\n--- Required boilerplate code\n--- Inspiration from official asyncio tutorial docs\nMaking a service emactually/em concurrent (5m)\n--- non-blocking vs concurrent\n--- when to be concurrent vs serial \n--- using callbacks vs awaits vs scheduling tasks (create_task) vs asyncio.Events\n--- Making synchronous code asyncio-friendly (2m)\nIntermediate (9m - trimmed to 6m for 30 min slot)\nGraceful shutdowns (3m)\n--- What a signal handler is, why it’s needed\n--- What signals to listen to\n--- Gotchas of cancelling tasks, asyncio.shield + shutdown behavior\nException handling (3m)\n--- Difference between top-level exception handling and handling within other coroutines\n--- Avoid mistakenly swallowing/missing raised exceptions\n--- Making use of loop.setemexception/emhandler\nMaking threaded code asyncio-“friendly” (3m)\n--- Calling threaded code from coroutines (aka running within a ThreadPoolExecutor)\n--- Calling coroutines from from threaded code (aka runemcoroutine/emthreadsafe)\nAdvanced (19m - trimmed to 15m for 30 min slot)\nTesting asyncio code (7m)\n--- Benefits of debug mode\n--- How to mock coroutines\nDebugging an asyncio service (5m)\n--- Reinforce debug mode\n--- Using “tricks\"\" like codeasyncio.all_tasks/code with logging, codeloop.slow_callback_duration/code, adding context/stack trace in default exception handler\nProfiling (7m)\n--- Basic profiling (cProfile, strace) - not that different from sync code\n--- Continuous profiling with 3rd party tools, i.e. github.com/what-studio/profiling\n--- PyCharm’s asyncio &amp; thread profiler\n--- How to properly trace a workflow/request (e.g. for the purpose of distributed tracing) (to be cut if not enough time)\nWrap up/Review (1m)\n/ol\n\n\n\nLicense: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/\nPlease see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/"

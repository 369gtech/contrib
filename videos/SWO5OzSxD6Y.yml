# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - craftsmanship
    - functional
title: 'Simon Peyton Jones - Revisiting pattern match overlap checks in Haskell | Code Mesh LDN 19'
language: English
recordingDate: 1576843211
description: "This video was recorded at Code Mesh LDN 19 - http://bit.ly/37xc3Nr\n\nGet involved in Code Sync's next conference - http://bit.ly/2Mcm4aS\n\n---\n\nREVISITING PATTERN MATCH OVERLAP CHECKS IN HASKELL\nby Simon Peyton Jones\n\nTALK LEVEL: All levels\n\nABSTRACT\nHow hard can it be to spot missing or overlapping patterns in a Haskell function definition? Surely it’s the least we can expect from a decent compiler? But when you mix in GADTs, pattern guards, view patterns, data families, strict data constructors, and pattern synonyms, matters get surprisingly tricky.\n\nIn a 2015 paper “GADTs meet their match” (https://www.microsoft.com/en-us/research/publication/gadts-meet-their-match-pattern-matching-warnings-that-account-for-gadts-guards-and-laziness/) we explored a nice, modular account of pattern-match checking that addresses many of these tricky points. Alas, GHC’s implementation of that paper has proved less than satisfactory: it can be terribly slow, and misses cases that programmers think look obvious. So my colleague Sebastian Graf and I have been radically refactoring the implementation.\n\nIn this talk, I will give lots of tricky examples of pattern matching, describe how to think about coverage and overlap checking, and reflect on how their new refactored implementation works.\n\nSlides & full abstract: https://codesync.global/speaker/simon-peyton-jones/\n\n---\n\nTHE SPEAKER - SIMON PEYTON JONES\nPrincipal researcher at Microsoft Research\n\nhttps://www.microsoft.com/en-us/research/people/simonpj/#!biography\n\nSimon has been a researcher at Microsoft Research in Cambridge, England since Sept 1998. He's also an Honorary Professor of the Computing Science Department at Glasgow University, where he was a professor during 1990-1998.\n\nSimon is interested in the design, implementation, and application of lazy functional languages. In practical terms, that means he spends most of his time on the design and implementation of the language Haskell. In particular, much of his work is focused around the Glasgow Haskell Compiler, and its ramifications.\n\nSimon is chair of Computing at School, the group at the epicentre of the reform of the national curriculum for Computing in England. Computer science is now a foundational subject, alongside maths and natural science, that every child learns from primary school onwards (background here).\n\nMore on Simon Peyton Jones: https://codesync.global/speaker/simon-peyton-jones/\n\n---\n\nCODE SYNC & CODE MESH LDN 19\nCode Mesh LDN is powered by Code Sync. Code Mesh LDN 19 was sponsored by WhatsApp, Microsoft, Erlang Solutions, Juxt, aeternity, Duffel, and IOHK. \n\nCODE SYNC \nWebsite: www.codesync.global\nTwitter: www.twitter.com/CodeMeshIO\nFacebook: https://www.facebook.com/CodeSyncGlobal\nLinkedIn: https://www.linkedin.com/company/code-sync/\nMail: info at codesync.global\n\n#PatternMatching #Haskell #SimonPeytonJones"

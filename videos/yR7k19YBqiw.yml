# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

title: 'K-means & Image Segmentation - Computerphile'
language: English
recordingDate: 1473867642
description: "K-means sorts data based on averages. Dr Mike Pound explains how it works.\n\nFire Pong in Detail: https://youtu.be/ZoZMMg1r_Oc \nDeep Dream: https://youtu.be/BsSmBPmPeYQ \nFPS & Digital Video: https://youtu.be/yniSnYtkrwQ \n\nDr. Mike's Code: \n% This script is the one mentioned during the Computerphile Image\n% Segmentation video. I chose matlab because it's a popular tool for\n% quickly prototyping things. Matlab licenses are pricey, if you don't have\n% one (or, like me, work for an organisation that does) try Octave as a\n% good free alternative. This code should work in Octave too.\n\n% Load in an input image\nim = imread('C:\\Path\\Of\\Input\\Image.jpg');\n\n% In matlab, K-means operates on a 2D array, where each sample is one row,\n% and the features are the columns. We can use the reshape function to turn\n% the image into this format, where each pixel is one row, and R,G and B\n% are the columns. We are turning a W,H,3 image into W*H,3\n\n% We also cast to a double array, because K-means requires it in matlab\nimflat = double(reshape(im, size(im,1) * size(im,2), 3));\n\n% I specify that initialisation shuold sample points at\n% random, rather than anything complex like kmeans++ initialisation.\n% Kmeans++ takes a long time if you are using 256 classes.\n\n% Perform k-means. This function returns the class IDs assigned to each\n% pixel, and in this case we also want the mean values for each class -\n% what colour is each class. This can take a long time if the value for K\n% is large, I've used the sampling start strategy to speed things up.\n\n% While KMeans is running, it will show you the iteration count, and the\n% number of pixels that have changed class since last iteration. This\n% number should get lower and lower, as the means settle on appropriate\n% values. For large K, it's unlikely that we will ever reach zero movement\n% (convergence) within 150 iterations.\nK = 3\n[kIDs, kC] = kmeans(imflat, K, 'Display', 'iter', 'MaxIter', 150, 'Start', 'sample');\n\n% Matlab can output paletted images, that is, grayscale images where the\n% colours are stored in a separate array. This array is kC, and kIDs are\n% the grayscale indices.\ncolormap = kC / 256; % Scale 0-1, since this is what matlab wants\n\n% Reshape kIDs back into the original image shape\nimout = reshape(uint8(kIDs), size(im,1), size(im,2));\n\n% Save file out, you need to subtract 1 from the image classes, since once\n% stored in the file the values should go from 0-255, not 1-256 like matlab\n% would do.\nimwrite(imout - 1, colormap, 'C:\\Path\\Of\\Output\\Image.png');\n\n\nhttp://www.facebook.com/computerphile\nhttps://twitter.com/computer_phile\n\nThis video was filmed and edited by Sean Riley.\n\nComputer Science at the University of Nottingham: http://bit.ly/nottscomputer\n\nComputerphile is a sister project to Brady Haran's Numberphile. More at http://www.bradyharan.com"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - python
title: 'Jupyter''s configuration system'
language: English
recordingDate: 1539210895
description: "Afshin Darian (Two Sigma | Project Jupyter), M Pacer (Netflix), Min Ragan-Kelley (Simula Research Laboratory), Matthias Bussonnier (UC Berkeley BIDS)\n\nJupyter’s straightforward, out-of-the-box experience has been important for its success in widespread adoption. But good defaults only go so far. Jupyter’s modular design and powerful, flexible configuration systems inspire users’ creativity and enthusiasm. By enabling people to customize their tools, Jupyter’s configuration systems allow people to determine their own computational destiny. However, with great power comes great fragility; the same config files that enable user freedom and empowerment are a potential source of user frustration and confusion. Because of how Jupyter’s configuration systems work, tracing down the source of a configuration issue can be an arduous task.\n\nJoin Afshin Darian, M Pacer, Min Ragan-Kelley, and Matthias Bussonnier to go beyond the defaults and make Jupyter your own, focusing on Jupyter’s config systems—how to use them productively and how to debug them when things (inevitably) break. This is all the more important to do today, as the number and diversity of configuration systems is continuing to grow. For instance, Jupyter’s Python applications use the classic traitlets system, a versatile typed system that allows defining a common interface across CLIs, APIs, and configuration files, while JupyterLab introduces new configuration systems, as well as user-friendly interfaces for viewing and setting those configuration values. And managed deployments present their own challenges.\n\nThrough concrete examples and demos, you’ll explore the ideas needed to use, understand, and debug Jupyter’s configuration system. Some topics will be demonstrations of JupyterLab UIs, while others will show the role of configuration across a number of Jupyter libraries, including nbconvert, the notebook server, JupyterLab LaTeX, and traitlets.config.\n\nTopics include:\n\nJupyter’s Python-based configuration systems (via traitlets.config)\nHow to set configuration settings on the command line, in configuration files, or in programmatic code (and why you’d want to)\nThe many scopes of configuration and how to use them to your advantage\nWhat server extensions are and how to install, enable, and disable them\nHow to build configurable API handlers and nonconfigurable API handlers that can still use configuration files\nHow to use jupyter_conf_search to help you hunt down configuration issues\nJupyterLab’s configuration systems\nHow to use themes\nHow to set custom keybindings\nHow to save and manipulate user sessions (i.e., JupyterLab workspaces)\nHow to enable and disable labextensions\nJupyterLab’s hierarchical semantics for creating defaults and allowing overrides\n\nSubscribe to O'Reilly on YouTube: http://goo.gl/n3QSYi\n\nFollow O'Reilly on: \nTwitter: http://twitter.com/oreillymedia\nFacebook: http://facebook.com/OReilly\nInstagram: https://www.instagram.com/oreillymedia\nLinkedIn: https://www.linkedin.com/company-beta/8459/"

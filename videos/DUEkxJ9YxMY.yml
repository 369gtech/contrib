# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


title: 'CppCon 2018: Pablo Halpern “Using Compile-time Code Generation to build an LLVM IR Pattern Matcher”'
language: English
recordingDate: 1540450801
description: "http://CppCon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n—\nAlthough expression templates have been around for many years and are a great example of compile-time code generation, they have typically been limited to relatively short expressions who's grammar can be expressed as a tree. What do you do when you want to express something more like an assembly-language program, with loops (cycles) in it? This was the problem that I encountered when trying to identify certain loop patterns in an LLVM compiler back end. The LLVM infrastructure provides a pattern matching library, but it has some limitations -- most notably the inability to express cycles in the code it matches. \n\nTaking the idea of expression templates and kicking it up a notch, I created a library that allows an input pattern to be expressed directly in C++ using a syntax that resembles assembly language then generate, at compile time, an actual pattern-matching subroutine customized for that pattern. In the process, I deepened my knowledge of constexpr expressions, and built an interesting infrastructure that I will now share with you. \n\nThis talk is for the advanced C++ programmer. An understanding of templates, type traits, and basic metaprogramming is assumed. No prior knowledge of LLVM or compilers is required, though compiler back-end implementers will find this talk especially interesting.\n— \nPablo Halpern, Intel\nSenior Software Engineer\n\nPablo Halpern has been programming in C++ since 1989 and has been a member of the C++ Standards Committee since 2007. His major contributions to the standard have been in the areas of parallel and vector programming constructs as well as on improvements to the usability of memory allocators. His current development focus at Intel is on the back-end of a C++ compiler for an Intel compute accellerator. He lives with his family in southern New Hampshire. When not working ot compilers and allocators, he enjoys studying the viola, hiking, skiing, snowboarding, and watching opera.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

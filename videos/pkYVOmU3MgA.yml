# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

title: 'Data Structures and Algorithms in Python - Full Course for Beginners'
language: English
recordingDate: 1631106533
description: "A beginner-friendly introduction to common data structures (linked lists, stacks, queues, graphs) and algorithms (search, sorting, recursion, dynamic programming) in Python. This course will help you prepare for coding interviews and assessments.\n\n🔗 Course website: https://jovian.ai/learn/data-structures-and-algorithms-in-python\n\n✏️ Created by Aakash N S, founder and CEO of Jovian.\n\n⭐️ Course Lessons with Code ⭐️\n🟢 Lesson 1 - Binary Search, Linked Lists and Complexity\n   💻 Linear and Binary Search: https://jovian.ai/aakashns/python-binary-search\n   💻 Problem Solving Template: https://jovian.ai/aakashns/python-problem-solving-template\n   💻 Linked Lists in Python: https://jovian.ai/aakashns/python-classes-and-linked-lists\n🟢 Assignment 1 - Binary Search Practice\n   💻 Starter Notebook: https://jovian.ai/aakashns/python-binary-search-assignment\n🟢 Lesson 2 - Binary Search Trees, Traversals and Recursion\n   💻 Binary Search Trees in Python: https://jovian.ai/aakashns/python-binary-search-trees\n   💻 Problem Solving Template: https://jovian.ai/aakashns/python-problem-solving-template\n   💻 Linked Lists in Python: https://jovian.ai/aakashns/python-classes-and-linked-lists\n🟢 Assignment 2 - Hash Tables and Python Dictionaries\n   💻 Starter Notebook: https://jovian.ai/aakashns/python-hash-tables-assignment\n🟢 Lesson 3 - Sorting Algorithms and Divide & Conquer\n   💻 Sorting and Divide & Conquer: https://jovian.ai/aakashns/python-sorting-divide-and-conquer\n   💻 Problem Solving Template: https://jovian.ai/aakashns/python-problem-solving-template\n🟢 Assignment 3 - Divide and Conquer Practice\n   💻 Starter Notebook: https://jovian.ai/aakashns/python-divide-and-conquer-assignment\n🟢 Lesson 4 - Recursion and Dynamic Programming\n   💻 Problem-solving template: https://jovian.ai/aakashns/python-problem-solving-template\n   💻 Dynamic Programming problems: https://jovian.ai/aakashns/dynamic-programming-problems\n🟢 Lesson 5 - Graph Algorithms (BFS, DFS & Shortest Paths)\n   💻 Graphs and Graph Algorithms (Starter Notebook): https://jovian.ai/aakashns/python-graph-algorithms\n🟢 Project - Step-by-Step Solution to a Programming Problem\n   💻 Starter Notebook: https://jovian.ai/aakashns/python-problem-solving-template\n🟢 Lesson 6 - Python Interview Questions, Tips & Advice\n   💻 Problem solving template: https://jovian.ai/aakashns/python-problem-solving-template\n   💻 Coding problem 1: https://jovian.ai/aakashns/python-subarray-with-given-sum\n   💻 Coding problem 2: https://jovian.ai/aakashns/python-minimum-edit-distance\n\n⭐️ Course Contents ⭐️\n⌨️ (00:00:00) Introduction\n⌨️ (00:01:43) Binary Search Linked Lists and Complexity\n⌨️ (00:03:43) Introduction\n⌨️ (00:08:35) Problem\n⌨️ (00:12:17) The Method\n⌨️ (00:13:55) Solution\n⌨️ (00:50:52) Complexity and Big O notation\n⌨️ (01:24:57) Binary Search vs Linear Search\n⌨️ (01:31:40) Generic Binary Search\n⌨️ (01:40:08) Summary and Conclusion\n⌨️ (01:44:30) Assignment Walkthrough\n⌨️ (01:45:05) Introduction\n⌨️ (01:50:01) Problem- Rotated Lists\n⌨️ (01:53:02) The Method\n⌨️ (01:54:03) Solution\n⌨️ (02:30:47) Summary and Conclusion\n⌨️ (02:33:29) Binary Search Trees Python Tutorial\n⌨️ (02:34:41) Introduction\n⌨️ (02:37:36) Problem\n⌨️ (02:38:40) The Method\n⌨️ (03:13:58) Binary tree\n⌨️ (03:27:16) Traversing Binary Tree\n⌨️ (03:36:10) Binary Search Tree\n⌨️ (04:22:37) Self-Balancing Binary Trees and AVL Trees\n⌨️ (04:26:27) Summary and Conclusion\n⌨️ (04:30:33) Hash Tables and Python Dictionaries\n⌨️ (04:31:09) Introduction\n⌨️ (04:34:00) Problem\n⌨️ (04:40:28) Data List\n⌨️ (04:42:52) Hash Function\n⌨️ (04:54:52) Basic Hash Table Implementation\n⌨️ (05:03:07) Handling Collisions with Linear Probing\n⌨️ (05:09:24) Summary and Conclusion\n⌨️ (05:16:47) Sorting Algorithms and Divide & Conquer\n⌨️ (05:17:48) Introduction\n⌨️ (05:20:19) Problem\n⌨️ (05:21:27) The Method\n⌨️ (06:40:49) Custom Comparison Functions\n⌨️ (06:48:53) Summary and Conclusion\n⌨️ (06:54:57) Recursion Memoization & Dynamic Programming\n⌨️ (06:56:37) Introduction\n⌨️ (07:00:04) Problem\n⌨️ (07:04:28) The Method\n⌨️ (07:06:21) Solution\n⌨️ (08:06:13) Knapsack Problems\n⌨️ (08:08:48) The Method\n⌨️ (08:09:24) Solution\n⌨️ (08:43:26) Summary and Conclusion\n⌨️ (08:44:05) Graph Algorithms BFS, DFS & Shortest Paths\n⌨️ (08:45:02) Introduction\n⌨️ (08:51:00) Graph Data Structure\n⌨️ (09:15:57) Graph Algorithms - Breadth-First Search\n⌨️ (09:37:28) Depth-First Search\n⌨️ (10:08:26) Shortest Paths\n⌨️ (10:40:39) Summary and Conclusion\n⌨️ (10:42:21) Python Interview Questions Tips & Advice\n⌨️ (10:43:09) Introduction\n⌨️ (10:44:08) The Method\n⌨️ (10:47:10) Solution\n⌨️ (12:30:51) Summary and Conclusion"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - ml
    - performance
    - elixir
    - scala
title: 'Stefan Karpinski - Julia: Fast Performance, Distributed Computing & Multiple Dispatch'
recordingDate: 1389974885
description: "Code Mesh London is the best place in Europe for non-mainstream tech and programming languages. On 4-5 December 2013 over 50 inventors and originators of the most innovative languages and technologies of the moment shared their experience with 200 attendees. Topics included Scala, Haskell, Clojure, Erlang, Elixir, Julia and much more. See you at Code Mesh 2014! codemesh.io/\n\nAbout the talk:\nJulia is a high-level, high-performance dynamic language carefully designed to be excellent for technical computing. It has been gaining traction as a an alternative to Matlab, R and NumPy -- especially in performance-critical areas such as machine learning, \"big statistics\", linear algebra and image analysis. But it's also a general purpose language that you can use for anything from serving web pages to writing games. This talk will explore some of Julia's unique design features, especially how it maintains high-level ease-of-use, while giving you performance and control traditionally only found in low-level languages like C and Fortran. Another unusal feature is that Julia's core paradigm is multiple dispatch: Julia programs are organized around generic functions -- first-class function objects to which methods can be added, allowing them to operate on new data types. Generic functions thus bridge the gap between object-oriented and functional paradigms, allowign the notorious \"expression problem\" to be solved in a particularly intuitive and elegant way. The talk will include lots of live coding and demos of everything from data analysis, to distributed computing, to defining new fast numeric primitives.\n\nTalk objectives:\n\nThe talk will start with a brief introduction to the Julia language: the way it looks and feels, how and why it was designed the way it was. It will continue with an introduction to the \"expression problem\" and why it's important for writing composable, reusable software. It will also provide examples of how to load and visualized data, and trivially run a computation on a cluster of machines."

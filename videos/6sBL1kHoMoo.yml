# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - testing
title: 'Thinking like an Erlanger - Torben Hoffmann'
language: English
recordingDate: 1422634561
description: "If you find Erlang is a bit tough, or if testing gives you headaches, this webinar is for you. We will spend most of this intensive session looking at how to design systems with asynchronous message passing between processes that do not share any memory.\n\nSince processes are so cheap to create in the Erlang run-time, one has to embrace designing with lots and lots of processes, which puts an emphasis on the interaction between the processes. For this we will look at Message Sequence Charts (MSCs) and enjoy how the protocols we designed are easy to identify in the code.\n\nAs testing asynchronous message passing can be a bit tricky, you will get a short intro on how to do that with QuickCheck's mocking facilities, and touch briefly on failure handling and how that influences the design of Erlang programs.\n\nThe running example is Conway's Game of Life, which fits Erlang really well and poses some interesting problems in the implementation, that apply to all asynchronous message passing solutions.\n\nTorben Hoffmann is CTO for Erlang Solutions. He has been active in the Erlang community for several years and has spoken at conferences world-wide. His first big Erlang related project was the introduction of Erlang as a technology to write a gateway in for Motorola Solutions in Denmark. Torben studied Engineering at the Technical University of Denmark.\n\nTwitter: @LeHoff\n\nGithub: lehoff\n\n \n\nWebinar objectives\n\n    Learn how asynchronous message passing and lots of processes create good solutions in Erlang.\n    Learn how to work with protocols to describe the interaction between processes.\n    Learn how to test asynchronous message passing with QuickCheck.\n\nTarget audience\n\n    Programmers who would like to get a good start on working with Erlang by embracing the idiomatic way of creating Erlang programs and programmers interested in learning more about testing."

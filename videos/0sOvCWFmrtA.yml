# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

title: 'Python API Development - Comprehensive Course for Beginners'
language: English
recordingDate: 1635772283
description: "Learn Python API development in one of the most comprehensive courses ever on the topic. You will build a full-fledged API in Python using FastAPI. You will learn the fundamentals of API design including routes, serialization/deserialization, schema validation, and models. You will also learn about SQL, testing with pytest, and how to build out a CI/CD pipeline using GitHub actions.\n\nüíª Code: https://github.com/Sanjeev-Thiyagarajan/fastapi-course\n\n‚úèÔ∏è Course from Sanjeev Thiyagarajan. Check out his channel: https://www.youtube.com/channel/UC2sYgV-NV6S5_-pqLGChoNQ\n\n‚≠êÔ∏è Course Contents\n00:00 Intro\n06:33 Project Overview\n11:22 Mac Python Installation\n13:15 Mac VS Code install and setup\n16:37 Windows Python Installation\n18:30 Windows VS Code install and setup\n22:11 Python virtual Env Basics\n24:35 Virtual Env on windows\n28:56 Virtual Env on Mac\n34:17 Install dependencies w/ pip\n36:21 Starting FastAPI\n39:23 Path Operations\n53:22 Intro toman\n57:34 HTTP Requests\n1:07:29 Schema Validation with Pydantic\n1:22:45 CRUD Operations\n1:29:44 Storing in Array\n1:34:06 Creating\n1:38:15 Postman Collections & saving requests\n1:39:47 Retrieve One\n1:48:10 Path order Matters\n1:52:46 Changing response Status Codes\n2:01:49 Deleting\n2:10:31 Updating\n2:18:02 Automatic Documentation\n2:21:34 Python packages\n2:24:11 Database Intro\n2:28:54 Postgres Windows Install\n2:31:28 Postgres Mac Install\n2:34:26 Database Schema & Tables\n2:44:35 Managing Postgres with PgAdmin GUI\n3:12:10 Your first SQL Query\n3:19:43 Filter results with \"where\"\n3:22:55 SQL Operators\n3:26:38 IN\n3:28:07 Pattern matching with LIKE\n3:31:59 Ordering Results\n3:36:27 LIMIT & OFFSET\n3:39:21 Modifying Data\n3:53:48 Setup App Database\n3:58:21 Connecting to database w/ Python\n4:08:00 Database CRUD\n4:31:18 ORM intro\n4:35:33 SQLALCHEMY setup\n4:55:25 Adding CreatedAt Column\n5:00:59 Get All\n5:07:55 Create\n5:15:50 Get by ID\n5:19:50 Delete\n5:22:31 Update\n5:28:21 Pydantic vs ORM Models\n5:32:21 Pydantic Models Deep Dive\n5:38:57 Response Model\n5:50:08 Creating Users Table\n5:54:50 User Registration Path Operation\n6:03:27 Hashing Passwords\n6:08:49 Refractor Hashing Logic\n6:10:32 Get User by ID\n6:17:13 FastAPI Routers\n6:27:34 Router Prefix\n6:30:31 Router Tags\n6:32:49 JWT Token Basics\n6:47:03 Login Process  \n7:00:44 Creating Token\n7:09:58 OAuth2 PasswordRequestForm\n7:13:23 Verify user is Logged In\n7:25:21 Fixing Bugs\n7:27:59 Protecting Routes\n7:36:17 Test Expired Token\n7:38:13 Fetching User in Protected Routes\n7:42:44 Postman advanced Features\n7:50:33 SQL Relationship Basics\n7:54:59 Postgres Foreign Keys\n8:07:20 SQLAlchemy Foreign Keys\n8:13:40 Update Schema to include User\n8:17:59 Assigning Owner id when creating new\n8:21:01 Delete and Update only your own\n8:27:48 Only Retrieving Logged in User's\n8:33:37 Sqlalchemy Relationships\n8:38:32 Query Parameters\n8:50:46 Cleanup our main.py file\n8:53:53 Env Variables\n9:21:20 Vote/Like Theory\n9:26:36 Votes Table\n9:31:33 Votes Sqlalchemy\n9:34:11 Votes Route\n9:52:31 SQL Joins\n10:15:26 Joins in SqlAlchemy\n10:28:21 Get One with Joins\n10:30:18 What is a database migration tool\n10:33:45 Alembic Setup\n11:13:50 Disable SqlAlchemy create Engine\n11:14:28 What is CORS?\n11:23:38 Git PreReqs\n11:27:40 Git Install\n11:29:23 Github\n11:34:39 Heroku intro\n11:35:40 Create Heroku App\n11:40:21 Heroku procfile\n11:44:59 Adding a Postgres database\n11:48:42 Env Variables in Heroku\n11:58:59 Alembic migrations on Heroku Postgres instance\n12:02:52 Pushing changed to production\n12:05:04 Create an Ubuntu VM\n12:08:04 Update packages\n12:10:47 Install Python\n12:12:21 Install Postgres & setup password\n12:17:28 Postgres Config\n12:24:50 Create new user and setup python evironment\n12:34:06 Env Variables\n12:42:24 Alembic migrations on production database\n12:45:57 Gunicorn\n12:54:12 Creating a Systemd service\n13:04:45 NGINX\n13:10:45 Setting up Domain name\n13:15:19 SSL/HTTPS\n13:19:31 NGINX enable\n13:20:06 Firewall\n13:23:47 Pushing code changes to Production\n13:26:09 Dockerfile\n13:38:39 Docker Compose\n13:48:34 Postgres Container\n13:56:22 Bind Mounts\n14:03:39 Dockerhub\n14:08:08 Production vs Development\n14:14:51 Testing Intro\n14:17:19 Writing your first test\n14:30:22 The -s & -v flags\n14:31:44 Testing more functions\n14:35:29 Parametrize\n14:40:21 Testing Classes\n14:48:37 Fixtures\n14:55:40 Combining Fixtures + Parametrize\n14:59:13 Testing Exceptions\n15:06:07 FastAPI TestClient\n15:14:26 Pytest flags\n15:17:31 Test create user\n15:25:23 Setup testing database\n15:36:47 Create & destroy database after each test\n15:44:18 More Fixtures to handle database interaction\n15:50:35 Trailing slashes in path\n15:53:12 Fixture scope\n16:07:50 Test user fixture\n16:14:40 Test/validate token\n16:18:59 Conftest.py\n16:22:09 Testing\n17:34:15 CI/CD intro\n17:43:29 Github Actions\n17:49:32 Creating Jobs\n17:57:38 setup python/dependencies/pytest\n18:06:14 Env variables\n18:11:19 Github Secrets\n18:18:14 Testing database\n18:23:42 Building Docker images\n18:34:33 Deploy to heroku\n18:49:10 Failing tests in pipeline\n18:52:18 Deploy to Ubuntu"

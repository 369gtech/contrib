# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - unix
    - testing
    - architecture
    - javascript
title: 'Build 5 Dapps on the Ethereum Blockchain - Beginner Tutorial'
language: English
recordingDate: 1570463388
description: "Learn Ethereum Dapp in this full tutorial for beginners. This course teaches how to build decentralized applications on the Ethereum Blockchain. We are going to build 5 Ethereum Dapps. For each of them, we will:\n- Develop smart contracts\n- Test smart contracts\n- Build a web frontend to interact with the smart contract\n\nThe course covers:\n- The architecture of Dapps\n- Solidity, the programming language for Ethereum smart contract\n- Remix, the online IDE for Solidity\n- Truffle, the framework for Solidity smart contracts\n- Ganache, the local development Blockchain\n- Web3, the JS library to integrate a Dapp frontend\n- Metamask, the Ethereum wallet used by most Dapps (browser extension)\n- Deployment to public testnet (Ropsten) and mainnet, using Infura API\n\nRequirements:\n- NodeJS v10\n- Works on both Windows, Linux and Mac\n\nüíª Code: https://github.com/jklepatch/eattheblocks/tree/master/dapp-30\n\nRegister to the FREE mini-course \"become a blockchain developer\" on eattheblocks.com to learn how to get a remote blockchain job making 100k.\n\nFor more tutorials on Ethereum Dapps, Solidity smart contracts, check out the EatTheBlocks channel: https://www.youtube.com/c/eattheblocks\n\nWhile this is a stand-alone course, it is part of Dapp 30, a course where we build 30 Ethereum Dapps so that you can learn Ethereum Dapps / Solidity AND build your portfolio to get a job as Blockchain developer: \nhttps://eattheblocks-pro.teachable.com/p/dapp-30\n\n‚≠êÔ∏è Course Contents ‚≠êÔ∏è\nDapp 1 - Simple smart contract\n‚å®Ô∏è 8:22: Smart contract: Intro to Solidity, Remix, Deploying contract on Remix\n‚å®Ô∏è 21:09: Tests - Introduction to Truffle and tests\n‚å®Ô∏è 32:03: Frontend - Architecture of Ethereum Dapp / integration with smart contract, ABI, intro to Web3\n\nDapp 2 - Helloworld\n‚å®Ô∏è 57:18: Smart contract - Solidity read-only functions, Interacting with functions in Remix\n‚å®Ô∏è 1:07:28: Tests - Testing a smart contract function with Truffle\n‚å®Ô∏è 1:12:33: Frontend - Interacting with a smart contract function from frontend, with Web3\n\nDapp 3 - Simple storage\n‚å®Ô∏è 1:24:00: Smart contract - Solidity functions that can modify smart contract data (in transaction)\n‚å®Ô∏è 1:41:53: Tests - Test (transaction) smart contract functions with Truffle\n‚å®Ô∏è 1:45:27: Frontend - Sending transactions from frontend, with Web3\n\nDapp 4 - Complex storage\n‚å®Ô∏è 2:04:05: Smart contract - Solidity Arrays (adding element, read single element, read all elements and get length) \n‚å®Ô∏è 2:14:37: Tests - Testing Solidity arrays with Truffle, introduction to the BN.js library to deal with Solidity numbers\n‚å®Ô∏è 2:26:54: Frontend - Using Webpack / ES6 for Dapp frontend, Intro to (new) Metamask and integration with frontend\n\nDapp 5 - Crud\n‚å®Ô∏è 3:06:51: Smart contract - create, read update and delete data in Solidity\n‚å®Ô∏è 3:31:33: Tests - How to tests Solidity errors with Truffle (require, revert...)\n‚å®Ô∏è 3:47:25: Frontend - Deployment on public testnet (Ropsten) and Mainnet with Infura\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org\n\nAnd subscribe for new videos on technology every day: https://youtube.com/subscription_center?add_user=freecodecamp"

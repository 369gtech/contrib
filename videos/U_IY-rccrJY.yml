# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - storage
    - performance
    - containers
    - kubernetes
title: 'When and How to use CGo Or, Foreign Functions for Fun and Profit'
language: English
recordingDate: 1549999832
description: "by Liz Frost\n\nAt: FOSDEM 2019\nhttps://video.fosdem.org/2019/UD2.120/gco.webm\n\n\nGo is, for all its C-esque syntax, is a relatively high-level language. There’s garbage collection, a type hierarchy, and even advanced concurrency primitives. Sometimes, though, you need access to lower-level control. Whether for performance, interoperability, or just for fun, the Cgo API is here to help! I will explain what it is, how to use it, and perhaps most importantly, when to avoid it. A lot of Go programmers only experience with Cgo is when compilation fails with some obscure error. There’s a lot more to learn than that, and a lot of opportunities! I’ve personally used Cgo for writing Postgres foreign wrappers, and as a consumer when compiling Kubernetes. \n\nUsing Cgo can be a fun, rewarding experience. There are a lot of existing projects and libraries written in C, and calling them means not needing to reinvent the wheel. On the same face, if you have an existing project with a C API, calling Go can get you some of the higher-level Go niceness on top of the jagged C edges. \n\nSome things I intend to touch on:\n* Calling Go from C\n* Calling C from Go\n* Memory management with Go objects in C\n* Using C libraries from Go\n* Real-world Cgo examples\n* The pitfalls Go and dynamic linking\n* Debugging failures \n\nRoom: UD2.120 (Chavanne)\nScheduled start: 2019-02-02 15:00:00+01"

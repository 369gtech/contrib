# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - .net
    - 'c#'
title: 'Интерфейсы C# (Interface) - Учим Шарп #13'
language: Russian
recordingDate: 1545330230
description: "Интерфейсы C# (Interface C#) и их имплиментация\n\nНа этом занятии мы узнаем, что такое интерфейс (interface) в языке программирования C#, научимся их реализовывать (имплементировать) явно и неявно. Узнаем основные отличия интерфейсов и абстрактных классов. \n\nПодписывайтесь на информационные каналы курса, чтобы ничего не пропустить и не потерять информацию:\nЗакрытый чат для участников курса: https://vk.cc/8Ev4Gv \nРассылка с оповещениями в ВК: https://vk.cc/86Y7Pa\n\nПодписывайтесь на мои социальные сети, там много всего интересного и полезного: \nhttps://vk.com/codeblog\nhttps://tele.click/codeblog\nhttps://zen.yandex.ru/codeblog\n\nПоддержать канал: https://www.donationalerts.ru/r/shwanoff\n\nКстати, меня зовут Шванов Вадим, и я программист на языке C# уже больше 8 лет, а также я являюсь автором ресурсов для разработчиков CODE BLOG. На этом канале я рассказывают про IT, технологии и веду курс C# с нуля под названием Учим Шарп. В его рамках мы рассматриваем язык программирования c# с нуля, синтаксис, структуры данных, алгоритмы, паттерны проектирования и многое другое. Эти уроки c sharp подойдут для начинающих и для тех кто хочет подробнее изучить платформу .net и среду разработки visual studio. Для меня важно не только показать практическое применение языка си шарп и платформы dotnet, но и  объяснить базовые идеи программирования. Уроки с# выходят как минимум два раза в неделю в понедельник и четверг в 20-00. C# курс рассчитан на то, чтобы изучить программирование с нуля. Все занятия веду я сам - опытный программист c#. Разработка ведется в IDE visual studio c#. Подписывайтесь, впереди еще много интересного и полезного об it, программировании как для  начинающих, так и для более опытных программистов c#.\n\nДля начала ознакомимся с формальным определением типа интерфейса. Интерфейс (interface) представляет собой не более чем просто именованный набор абстрактных членов. Абстрактные методы являются чистым протоколом, поскольку не имеют никакой стандартной реализации. Конкретные члены, определяемые интерфейсом, зависят от того, какое поведение моделируется с его помощью. Это действительно так. Интерфейс выражает поведение, которое данный класс или структура может избрать для поддержки. Более того, каждый класс (или структура) может поддерживать столько интерфейсов, сколько необходимо, и, следовательно, тем самым поддерживать множество поведений.\n\nНетрудно догадаться, что в библиотеках базовых классов .NET поставляются сотни предопределенных типов интерфейсов, которые реализуются в различных классах и структурах. Например, в состав ADO.NET входит множество поставщиков данных, которые позволяют взаимодействовать с определенной системой управления базами данных. Это означает, что в ADO.NET на выбор доступно множество объектов соединения (SqlConnection, OracleConnection, OdbcConnection и т.д.).\n\nВ интерфейсе ни у одного из методов не должно быть тела. Это означает, что в интерфейсе вообще не предоставляется никакой реализации. В нем указывается только, что именно следует делать, но не как это делать. Как только интерфейс будет определен, он может быть реализован в любом количестве классов. Кроме того, в одном классе может быть реализовано любое количество интерфейсов.\n\nДля реализации интерфейса в классе должны быть предоставлены тела (т.е. конкретные реализации) методов, описанных в этом интерфейсе. Каждому классу предоставляется полная свобода для определения деталей своей собственной реализации интерфейса. Следовательно, один и тот же интерфейс может быть реализован в двух классах по-разному. Тем не менее в каждом из них должен поддерживаться один и тот же набор методов данного интерфейса. А в том коде, где известен такой интерфейс, могут использоваться объекты любого из этих двух классов, поскольку интерфейс для всех этих объектов остается одинаковым. Благодаря поддержке интерфейсов в C# может быть в полной мере реализован главный принцип полиморфизма: один интерфейс — множество методов.\n\nИнтерфейсы объявляются с помощью ключевого слова interface.\n\nПодробный курс по языку программирования C#:\nhttps://www.youtube.com/watch?v=p9QxqrwkPbA&list=PLIIXgDT0bKw4OmiZ9yGmShKsY0XncViZ8\n\nПодробный курс по структурам данных на языке программирования C#:\nhttps://www.youtube.com/watch?v=hZYQmNJBsKM&list=PLIIXgDT0bKw4DB9toGU73ntyYIZV7aJi5\n\nПодробный курс по алгоритмам сортировки на языке C#:\nhttps://www.youtube.com/watch?v=PD1Nn4fHcts&list=PLIIXgDT0bKw4n6pwBjymd3wCPyQ3_SLMo\n\nРазговоры о программировании, мотивации, и ответы на IT вопросы:\nhttps://www.youtube.com/watch?v=cjjA6SQ_i3Y&list=PLIIXgDT0bKw7oKRr2c1n-e_dUgR8Aqdsi\n\n#программирование #программист #csharp #ityoutubersru #codeblog"

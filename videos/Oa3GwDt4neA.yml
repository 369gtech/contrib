# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - ruby
    - scala
title: 'Bartosz Bąbol, Daniel Chruściak - Scala macros (...) (Lambda Days 2016)'
recordingDate: 1462445418
description: "Slides and more info: http://www.lambdadays.org/lambdadays2016/bartosz-babol\n\"Scala macros - swiss army knife for building libraries\"\n\nIf you are perfectionist you want to minimize the amount of boilerplate code. You’ve heard about Scala and you think it is a good idea to use it as your language of choice. But it turns out that there are places where boilerplate code is unavoidable and you want do better.  Your dream is to have library or maybe some kind of DSL which will read your mind without explicit orders. Maybe you’ve heard about  metaprogramming in Ruby, but you dropped the idea of using it because of lack of static typing. Is there a way to generate code using the advantages of static typing and still keep the expressiveness?\n\nYes! Scala is an expressive language with many outstanding features. One of them are Scala macros. It is a fantastic multitool for creating rich and easy to use libraries. Macros are used under the hood of many known libraries such as Slick, frameworks like Play, and even within the Scala language. They allow developer to take advantage of self-generating and self-mutating code.\nOur talk will consist of 3 parts:\n- Introduction to macros(overview and main concept),\n- example of using macro annotations (with usage of quasiquotes- rich domain specific API for AST tree manipulation)\n- presenting how to write your own library based on the example of our solution.\n\nDuring this talk we will outline advantages and downsides of macros. We will describe and overview what quasiquotes are, and how to use them in a flexible way. Moreover, we will specify the main problems which we encountered during writing our own library, now used in production.\nWe had a lot of fun when learning macros. They helped us to write a library, which we now use with Play Framework and Slick. We believe that macros can be used by developers more frequently to solve everyday problems. Come and find out if they can help you too."

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - c++
    - performance
    - security
title: 'CppCon 2018: “Secure Coding Best Practices: Your First Line Is The Last Line Of Defense (2 of 2)”'
language: English
recordingDate: 1540105204
description: "http://CppCon.org\n\nMatthew Butler “Secure Coding Best Practices: Your First Line Is The Last Line Of Defense (part 2 of 2)”\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n—\nComputer systems are under siege 24 hours a day, day in and day out. The critical security infrastructure designed to protect those systems, won't: \n\n* Perimeter security won't protect you. \n* Network analytics won't protect you. \n* Virus scanners won't protect you. \n* Even the users who should know better than to click on that too-good-to-be-true offer won't protect you. \n\nThe other side has the best security hardware and software systems other people's money can buy and they have all the time in the world to find creative ways to defeat them. Meltdown and Spectre are prime examples of security vulnerabilities that have lurked dormant for decades. Or have they? If your systems are in any way connected to the outside world, the other side will get inside the wire on you. Know that going in. \n\nWhether you write applications, libraries or work in kernel code, the line of code you write today may very well be the vulnerability someone else finds tomorrow. By nature every code base contains hundreds of attack surfaces and it only takes one serious vulnerability to compromise your system. \n\nWhile Modern C++ is designed to be secure, the ways we use it often aren't. \n\n\nIn part one of this talk we'll see: \n\n* How hackers think and how they identify weaknesses in our systems. \n* How to identify hidden attack surfaces, attack vectors and vulnerabilities in critical systems. \n* Where the most common vulnerabilities in Modern and classic C++ are and how to avoid them. \n* Why avoiding parts of the language doesn't help. \n* Where we can trade off security for performance. \n\nAt the end of part one, we'll do a walkthrough of a classic buffer overflow exploit to see how it works and what we've added to the operating systems and compilers to protect against them. Then we'll use it live to run a privilege escalation exploit and gain admin access on a system. \n\n\nIn part two, we'll see: \n\n* Why common guidelines and static analysis tools often fail to find vulnerabilities. \n* How to use Threat Modeling to analyze complex systems and built security into our systems at design time. \n* How to use Trust Boundaries to protect critical infrastructure. \n* Why open source and third-party libraries are fast becoming hidden liabilities in our software and how to protect ourselves against their vulnerabilities. \n* What the best practices for protecting our code from attack are. \n\nAt the end of part two, we'll do a walkthrough of an exploit that can be successful today in spite of the safe guards built into our operating systems and compilers. Then, as before, we'll use it live to penetrate a system. \n\n\nThe critical security infrastructure designed to protect your systems is largely out of your control. The one thing you can control is the next line of code you write. This talk is for anyone that uses C++ or Modern C++ for kernel, applications or libraries that run in the real-world and that face real-world attacks. \n\nIn today's world, that's all of us.\n— \nMatthew Butler\n\nMatthew Butler has spent the last three decades as a systems architect and software engineer developing systems for network security, law enforcement and the military. He primarily works in signals intelligence using C, C++ and Modern C++ to build systems running on hardware platforms ranging from embedded micro-controllers to FPGAs to large-scale airborne platforms. Much of his experience has come in either building systems that defend against attackers or building highly sensitive systems that are targets. He is actively involved in the C++ community and is on various planning committees for C++Now and CppCon as well as being a speaker at both.\n\nOver the past thirty years, he has learned the harsh lessons on how we often write systems that fail, not because they don't scale, but because they aren't designed to be secure.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - unix
    - 'data structures'
title: '"RISC-V FDPIC/NOMMU toolchain/runtime support" - Maciej W. Rozycki (LCA 2020)'
recordingDate: 1579160321
description: "Maciej W. Rozycki\n\nhttps://lca2020.linux.org.au/schedule/presentation/203/\n\nThe RISC-V ISA provides PC-relative addressing, which means that with hardware equipped with an MMU that supports virtual memory addressing the ELF PIC psABI is straightforward and does not require the use of a dedicated GOT or global data pointer (GP) register in code intended for PIE executables or DSOs, because all static addresses can be worked out from the PC with the aid of a couple instructions.  This is in particular because at load time virtual addresses of all loadable segments in an ELF PIC image are relocated by adding the same value (the base address in ELF-speak) to all of them, according to how the image has been mapped in virtual memory, which is the difference between the virtual addresses recorded in the file loaded and the corresponding actual addresses in memory, which in turn implies that the distance between the text segment and any other segment remains fixed.\r\n\r\nThis approach does not work for NOMMU systems if we want to keep read-only text/rodata segments shared among processes, because there is no virtual addressing available to remap physical addresses such that for all the processes involved the text and other read-only segments occupy the same addresses while the corresponding read/write data segments are within a fixed distance from the text segment and do not clash with read/write data segments of another process both at a time.\r\n\r\nThe problem can be solved, however it requires that read-only text/rodata segments and read/write data segments are mapped in memory independently of each other, and that in turn precludes the use of PC-relative addressing to reach data.  Instead a register has to be set aside to hold the GP, unique to each of all the ELF images/modules (both the main executable and all the DSOs) loaded.  This in turn not only requires extending the RISC-V psABI with GP-relative addressing, but defining a new convention for making function calls, such that if a call reaches into another ELF module the value of the GP is updated accordingly.\r\n\r\nThis is handled by creating a data structure, called a function descriptor (the first letters of which contribute to the FD letters in the FDPIC acronym), that associates a value of the GP with each external (preemptible) function symbol.  The function descriptor is then used in the code sequence used to make a function call modified such as to load both the GP and the PC with the addresses intended.  The use of a GP register, the modified function calling convention, and the new data structures and definitions all comprise the FDPIC psABI.\r\n\r\nIn this talk I am going to discuss a proposed design for the FDPIC psABI for RISC-V systems, and the changes required for the toolchain and the runtime to support it with the Linux/GNU system.\n\nlinux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/\n\nProduced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1\n\n#linux.conf.au #linux #foss #opensource\n\nMon Jan 13 11:25:00 2020 at Room 7"

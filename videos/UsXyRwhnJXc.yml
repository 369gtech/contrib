# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

category: conference
tags:
    - unix
    - performance
title: 'GPU Accelerated JPEG Rendering'
recordingDate: 1484832255
description: "Nathan Egge\nhttp://linux.conf.au/schedule/presentation/38/\nGPU Accelerated JPEG Rendering\r\n\r\nJPEG is the de facto standard for natural image compression on the web.  Most\r\nweb browsers use the open source libjpeg-turbo for decoding JPEG files because\r\na) it is libre software and b) there has been significant investment in SIMD\r\noptimization.  However, in applications where the resulting image is immediately\r\nuploaded to the GPU for compositing (like in modern web browsers) this approach\r\nhas two drawbacks:\r\n\r\n  1. The full uncompressed image must be uploaded to the GPU\r\n  2. Time spent decoding on the CPU robs computation from other tasks\r\n\r\nThese issues are exacerbated as more content is provided in high definition.\r\n\r\nThe jpeg_gpu project aims to solve both these problems by shifting the decode\r\ncomputation as early as possible to the GPU.  Partially decoded JPEG data is\r\nuploaded as soon as the entropy coded symbols are read, and a set of pre-defined\r\nshaders complete the rest of the decode into a GPU texture.  Depending on the\r\nresolution of the image and how much it is compressed, the speed-up can be\r\nsignificant.\r\n\r\nThis talk will cover how the jpeg_gpu library is designed to take maximum\r\nadvantage of GPU parallelism.  I will include a brief discussion of some\r\ntrade-offs made when designing the shader routines based on experimentation.\r\nThe real world performance of this approach will be discussed based on the\r\nintegration of jpeg_gpu into the WebRenderer compositing engine in Servo."

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - storage
title: 'Disk-Based Parallel Computation, Rubik''s Cube, and Checkpointing'
language: English
recordingDate: 1206439588
description: "Google Tech Talks\nMarch, 24 2008\n\nABSTRACT\n\n This talk takes us on a journey through three varied, but interconnected\n topics. First, our research lab has engaged in a series of disk-based\n computations extending over five years. Disks have traditionally\n been used for filesystems, for virtual memory, and for databases.\n Disk-based computation opens up an important fourth use: an abstraction\n for multiple disks that allows parallel programs to treat them in a\n manner similar to RAM. The key observation is that 50 disks have\n approximately the same parallel bandwidth as a _single_ RAM subsystem.\n This leaves latency as the primary concern. A second key is the use\n of techniques like delayed duplicate detection to avoid latency. For\n example, hash accesses accesses can be saved (even saved on disk), until\n there are sufficiently many pending accesses to use standard streaming\n techniques. We have designed a library for search problems that exploits\n the high parallel bandwidth while hiding the latency. We build\n abstractions for search that employ parallel disk-based hash arrays\n with the same speed as a single hash array in a single RAM subsystem.\n In the case of Rubik's cube, we exploited this mechanism by using\n seven terabytes of distributed disk in a search problem that showed\n that 26 moves suffice to solve Rubik's cube. Our initial efforts\n emphasize idempotent operations, so that we can easily recover from\n hardware or software faults. We next intend to apply a more general\n solution for fault recovery: checkpointing. This separate effort\n in our lab has now produced a mature, robust user-level checkpointing\n program has now matured. The package works successfully in tests\n on OpenMPI, MPICH-2, OpenMP, and parallel iPython (used in SciPy and\n NumPy). Our DMTCP package transparently checkpoints parallel,\n multi-threaded processes, with no modification either to the\n operating system or to the application binaries. Extrapolating\n from current experiments, we estimate that we can checkpoint a 1,000\n node parallel computation in a matter of minutes. We are currently\n searching for a testbed on which to demonstrate this scalability.\n\nSpeaker: Gene Cooperman"

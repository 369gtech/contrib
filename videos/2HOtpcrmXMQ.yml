# Contribution guide: https://github.com/watch-devtube/contrib

# speaker:
#   name: _____
#   twitter: _____ # mandatory twitter handle; must not include @

# tags: [____, _____, _____]

tags:
    - functional
title: 'Dominic Orchard - Quantitative program reasoning in Granule via graded modal types | Code Mesh LDN'
language: English
recordingDate: 1575892811
description: "This video was recorded at Code Mesh LDN 19 - http://bit.ly/37xc3Nr\n\nGet involved in Code Sync's next conference - http://bit.ly/2Mcm4aS\n\n---\n\nQUANTITATIVE PROGRAM REASONING IN GRANULE VIA GRADED MODAL TYPES\nby Dominic Orchard\n\nTHIS TALK IN THREE WORDS:\nTypes \nfor \nVerification\n\nTALK LEVEL: Intermediate\n\nABSTRACT\nA benefit of static typing is that various program properties can be specified and automatically checked as part of a language. But there are always limits to what can be expressed. This talk presents Granule, a functional language which pushes these limits by combining linear and indexed types with the recent notion of graded modal types. We'll see examples enforcing privacy constraints, stateful protocols, and verifying properties of standard functional programs just by getting the right type signature.\n\nSlides & full abstract: https://codesync.global/speaker/dominic-orchard/\n\n---\n\nTHE SPEAKER - DOMINIC ORCHARD\nComputer science lecturer and co-creator of the Granule language\n\nDominic is a computer science researcher and lecturer, interested in mathematically structured programming and lots else, at the School of Computing, University of Kent\n\nMore on Dominic Orchard: https://codesync.global/speaker/dominic-orchard/\n\n---\n\nCODE SYNC & CODE MESH LDN 19\nCode Mesh LDN is powered by Code Sync. Code Mesh LDN 19 was sponsored by WhatsApp, Microsoft, Erlang Solutions, Juxt, aeternity, Duffel, and IOHK. \n\nCODE SYNC \nWebsite: www.codesync.global\nTwitter: www.twitter.com/CodeMeshIO\nFacebook: https://www.facebook.com/CodeSyncGlobal\nLinkedIn: https://www.linkedin.com/company/code-sync/\nMail: info at codesync.global\n\n#Granule #FunctionalProgramming"

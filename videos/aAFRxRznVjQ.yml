# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - c++
    - testing
title: 'CppCon 2018: Alisdair Meredith “Contract Programming in C++(20) (part 1 of 2)”'
language: English
recordingDate: 1540105201
description: "http://CppCon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018\n—\nThis is a two part session about writing and using contracts \nto specify code in C++. \n\nContract Programming in C++ (first session) \nContract Programming in C++20 (second session) \n\nThe first session will define the fundamental princple that \nall software is build on: contracts as an exchange of promises \nbetween API authors and consumers. This first session will look \nat how deep these promises go, down into the language specification \nand design, and how we can effectively write and test our contracts \nusing C++ from the original C++98 standard up through more modern \ndialects. Finally, the properties of good and bad contracts will be \nstudied, with an emphasis on how they impact API design. \n\nThe second session will quickly recap the first session, before \njumping into the details of new proposals for C++20 that allow \ncontracts to be more clearly expressed in the language. New \nfeatures include contracts that can be tested and queried at \ncompile-time through the type system (Concepts), and support for \nwriting and testing contracts on object values at runtime, with \ndirect support for contracts in new attributes. Finally, the \nadvice regarding good and bad contracts will be revisited in \nlight of the new language support.\n— \nAlisdair Meredith, BloombergLP\nSenior Developer\n\nAlisdair Meredith is a software developer at BloombergLP in New York, and the C++ Standard Committee Library Working Group chair.\n\nHe has been an active member of the C++ committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C++11, and also fixed the contents of the original library TR.\n\nHe is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C++ development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com"

# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata


tags:
    - c++
    - performance
    - java
title: 'Parallel programming in Go for performance with the Pargo library'
language: English
recordingDate: 1549913434
description: "by Pascal Costanza\n\nAt: FOSDEM 2019\nhttps://video.fosdem.org/2019/UD2.120/pargo.webm\n\n\nGo is an excellent tool for concurrent programming. Goroutines and channels make it easy to coordinate multiple interacting processes. With careful design, good concurrent Go programs run efficiently on multi-core CPUs because multiple goroutines can run in parallel on multiple CPUs. \n\nWhat is less known is that Go also works very well for expressing parallel algorithms that do not communicate via channels, but access shared memory directly. This goes against Go’s famous slogan: “Do not communicate by sharing memory; instead, share memory by communicating.” However, sometimes performance matters so much that you have to make an exception. \n\nFortunately, Go is a very powerful language and makes it easy to make such exceptions. In this talk, I am going to walk you through Pargo, an open-source Go library explicitly designed for parallel programming rather than concurrent programming, which is available at https://github.com/exascience/pargo. This library is based on several years of experience with parallel programming at the ExaScience Lab at imec in Belgium, with many programming languages (C, C++, Java), many parallel programming libraries (Cilk, OpenMP, Intel Threading Building Blocks), and many applications (physics simulations, DNA sequencing, statistics). \n\nGo already provides primitives that help with parallel programming in the sync and sync/atomic packages of its standard library. Pargo builds on top of these primitives and offers high-level functions and data structures for expressing parallel algorithms. This covers simple convenience functions on top of goroutines, efficient parallel maps, parallel sort functions, and a very powerful pipeline concept for efficiently processing large data sets. \n\nThis talk will cover the following topics: \n\n\nHow Go schedules goroutines, and why they can therefore be used for task-based parallel programming.\nHow Pargo provides a number of parallel programming primitives to make task-based parallel programming easier.\nHow parallel Quicksort and Mergesort can be implemented with Pargo.\nHow Pargo allows you to write parallel pipelines for efficiently streaming, filtering, and transforming large data sets in parallel.\n\n\n\nPascal Costanza has a Ph.D. degree from the University of Bonn, Germany, and works as a senior researcher at imec, Leuven, Belgium. He was previously employed by Intel Corporation, and Vrije Universiteit Brussel, Belgium. He is an expert on high-performance and data-intensive computing with applications in bioinformatics, sequencing pipelines, and artificial intelligence. \n\nRoom: UD2.120 (Chavanne)\nScheduled start: 2019-02-02 16:00:00+01"
